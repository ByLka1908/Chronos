<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Utilities.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest">
            <summary>
            HttpWeb request wrapper
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.Url">
            <summary>
            Gets target Url
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.Method">
            <summary>
            Gets or sets used method (GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.Timeout">
            <summary>
            Gets or sets timeout for response
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.CachePolicy">
            <summary>
            Gets or sets cache policy
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.ContentType">
            <summary>
            Gets or sets content type. For example, "application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest" /> class.
            </summary>
            <param name="url">Url</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.AddHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Add HTTP headers.
            </summary>
            <param name="headers">Headers to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest.GetResponseAsync">
            <summary>
            Send request and get response back asynchronously.
            </summary>
            <returns>Response</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.CodeContract">
            <summary>
            CodeContract is used for validate input parameters
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.CodeContract.RequiresArgumentNotNull``1(``0,System.String)">
            <summary>
            Requires that argument is not null
            </summary>
            <typeparam name="T">type of argument</typeparam>
            <param name="value">Value</param>
            <param name="argumentName">string representation of the argument</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.CodeContract.RequiresArgumentNotEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Requires that string is not empty or contains just whitespaces
            </summary>
            <param name="value">value</param>
            <param name="argumentName">string representation of the argument</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.CodeContract.RequiresArgumentNotNullAndNotEmpty(System.String,System.String)">
            <summary>
            Requires that string is not null and not empty
            </summary>
            <param name="value">value</param>
            <param name="argumentName">string representation of the argument</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.CodeContract.RequiresArgumentNotNullAndNotWhiteSpace(System.String,System.String)">
            <summary>
            Requires that argument not null and not whitespace
            </summary>
            <param name="value">value</param>
            <param name="argumentName">string representation of the argument</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.CodeContract.RequiresArgumentNotEmpty(System.Guid,System.String)">
            <summary>
            Requires that Guid is not empty
            </summary>
            <param name="guid">Guid to validate</param>
            <param name="argumentName">string representation of the argument</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions">
            <summary>
            Several dictionary extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value by the given key.
            </summary>
            <typeparam name="TK">key type</typeparam>
            <typeparam name="TV">value type</typeparam>
            <param name="dictionary">dictionary</param>
            <param name="key">key in the dictionary</param>
            <returns>default if key doesn't exist in the dictionary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            Add one dictionary content to the another dictionary
            </summary>
            <typeparam name="TKey">type of the dictionary argument key</typeparam>
            <typeparam name="TValue">type of the dictionary argument value</typeparam>
            <param name="target">target dictionary</param>
            <param name="source">source dictionary</param>
            <param name="forceUpdate">whether we need to force update value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Remove key from the ConcurrentDictionary
            </summary>
            <typeparam name="TK">type of the dictionary argument key</typeparam>
            <typeparam name="TV">type of the dictionary argument value</typeparam>
            <param name="dictionary">dictionary</param>
            <param name="key">key</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest">
            <summary>
            HttpWeb request wrapper interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.Url">
            <summary>
            Gets target Url
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.Method">
            <summary>
            Gets or sets used method (GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.Timeout">
            <summary>
            Gets or sets timeout for response
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.CachePolicy">
            <summary>
            Gets or sets cache policy
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.ContentType">
            <summary>
            Gets or sets content type. For example, "application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.AddHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Add HTTP headers.
            </summary>
            <param name="headers">Headers</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest.GetResponseAsync">
            <summary>
            Send request and get response back asynchronously.
            </summary>
            <returns>Response</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools">
            <summary>
            Helper class to get information from the Registry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.GetRegistryIntValueFromLocalMachineRoot(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get int registry value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.GetRegistryIntValueFromLocalMachineRoot(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get int registry value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>\
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.GetRegistryValueFromLocalMachineRoot(System.String,System.String,System.Object)">
            <summary>
            Get registry key value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.GetRegistryValueFromLocalMachineRoot(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Get registry key value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.GetRegistryValueFromCurrentUserRoot(System.String,System.String,System.Object)">
            <summary>
            Get registry key value from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.SetRegistryFromCurrentUserRoot(System.String,System.String,System.Object)">
            <summary>
            Sets a value in the registry from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools.SetRegistryFromLocalMachineRoot(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Sets a value in the registry from the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <param name="use64Bit">optional, if set to true, it uses the 64 bit registry, otherwise defaults to 32 bit</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.GetRegistryValueNamesFromCurrentUserRoot(System.String)">
            <summary>
            Get the names of all values under a key in the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.GetRegistryValueNamesFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Get the names of all values under a key in the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.GetRegistrySubKeyNamesFromCurrentUserRoot(System.String)">
            <summary>
            Get the names of all subkeys under a key in the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.GetRegistrySubKeyNamesFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Get the names of all subkeys under a key in the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DoesRegistryKeyExistInCurrentUserRoot(System.String)">
            <summary>
            Determines if a key exists in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>True if key exists, false if it does not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DoesRegistryKeyExistInLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Determines if a key exists in the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if key exists, false if it does not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DeleteRegistryKeyFromCurrentUserRoot(System.String)">
            <summary>
            Deletes the specified registry key and all subkeys in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DeleteRegistryKeyFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Deletes the specified registry key and all subkeys in the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DeleteRegistryValueFromCurrentUserRoot(System.String,System.String)">
            <summary>
            Deletes the specified registry value from a key in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2.DeleteRegistryValueFromLocalMachineRoot(System.String,System.String,System.Boolean)">
            <summary>
            Deletes the specified registry value from a key in the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools3.TryGetRegistryValueKindFromCurrentUserRoot(System.String,System.String,Microsoft.Win32.RegistryValueKind@)">
            <summary>
            Determines the kind of a property in the HKCU root registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="kind">current value kind</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools3.TryGetRegistryValueKindFromLocalMachineRoot(System.String,System.String,Microsoft.Win32.RegistryValueKind@,System.Boolean)">
            <summary>
            Determines the kind of a property in the HKLM root registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="kind">current value kind</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IRegistryTools4.SetRegistryFromCurrentUserRoot(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <param name="valueKind">Supported RegistryValueKind's are bool, int, long/ulong which will convert to DWord, DWord, and QWord</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.ErrorCode">
            <summary>
            Possible error codes for response.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.ErrorCode.NoError">
            <summary>
            No error occurs
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.ErrorCode.NullResponse">
            <summary>
            Null response was returned.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.ErrorCode.RequestTimedOut">
            <summary>
            Request was cancelled by timeout.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.ErrorCode.WebExceptionThrown">
            <summary>
            Other web exception was thrown.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse">
            <summary>
            HttpWeb response wrapper interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse.ErrorCode">
            <summary>
            Gets response error code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse.ExceptionCode">
            <summary>
            Gets response exception code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse.StatusCode">
            <summary>
            Gets response status code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse.GetResponseStream">
            <summary>
            Get response as a stream.
            </summary>
            <returns>Response stream</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistry.Exists">
            <summary>
            Gets a value indicating whether the registry contains values at the given path
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistry.ConvertWinRegistryPathToMacosPath(System.String)">
            <summary>
            Converts a windows registry path to a macos file path
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistryTools">
            <summary>
            File based implementation of IRegistryTools that uses the FileBasedRegistry for Unix/MacOS.
            Machine level registry is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistryTools.GetRegistrySubKeyNamesFromCurrentUserRoot(System.String)">
            <summary>
            Get the names of all subkeys under a key in the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.MacNativeMethods">
            <summary>
            Class containing all PInvoke definitions we use in the Telemetry Library that are used on macOS.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.RegistryValue">
            <summary>
            Contains a registry value that is serializable for the Mono compatible FileBasedRegistry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.Name">
            <summary>
            Gets or sets the name of the value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.Type">
            <summary>
            Gets or sets the type of the value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.Text">
            <summary>
            Gets or sets the text of the value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.Strings">
            <summary>
            Gets or sets the collection of child strings for string[] values
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.Value">
            <summary>
            Gets the object value of the value that was deserialized
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryValue.FromValue(System.String,System.Object)">
            <summary>
            Creates a RegistryValue instance from the given value with the given name
            </summary>
            <param name="name">The name of the RegistryValue</param>
            <param name="value">The value assigned to the RegistryValue</param>
            <returns>Returns a new RegistryValue instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.RegistryValues">
            <summary>
            Contains registry values that are serializable for the Mono compatible FileBasedRegistry
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions">
            <summary>
            Object extensions methods
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions.Enumerate``1(``0)">
            <summary>
            Returns an enumeration that contains only the given value.
            </summary>
            <typeparam name="T">type of value</typeparam>
            <param name="value">value itself</param>
            <returns>INumerable type with only 1 value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return this enumeration in case it is not null. In case it is null return empty enumeration.
            </summary>
            <typeparam name="T">type of the values</typeparam>
            <param name="enumeration">enumeration</param>
            <returns>result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.Platform">
            <summary>
            Determines which platform the process is running on.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.Platform.IsWindows">
            <summary>
            Returns true on Windows platform.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.Platform.IsMac">
            <summary>
            Returns true on Mac OS platforms.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.Internal.Platform.IsLinux">
            <summary>
            Returns true on Linux platforms.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.RegistryTools">
            <summary>
            Helper class to get information from the Registry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryIntValueFromLocalMachineRoot(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get int registry value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryIntValueFromLocalMachineRoot(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get int registry value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueFromLocalMachineRoot(System.String,System.String,System.Object)">
            <summary>
            Get registry key value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueFromLocalMachineRoot(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Get registry key value from the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueFromCurrentUserRoot(System.String,System.String,System.Object)">
            <summary>
            Get registry key value from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.TryGetRegistryValueKindFromCurrentUserRoot(System.String,System.String,Microsoft.Win32.RegistryValueKind@)">
            <summary>
            Determines the kind of a property in the HKCU root registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="kind">current value kind</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.TryGetRegistryValueKindFromLocalMachineRoot(System.String,System.String,Microsoft.Win32.RegistryValueKind@,System.Boolean)">
            <summary>
            Determines the kind of a property in the HKLM root registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="kind">current value kind</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueNamesFromCurrentUserRoot(System.String)">
            <summary>
            Get the names of all values under a key in the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueNamesFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Get the names of all values under a key in the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistrySubKeyNamesFromCurrentUserRoot(System.String)">
            <summary>
            Get the names of all subkeys under a key in the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistrySubKeyNamesFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Get the names of all subkeys under a key in the HKLM root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>Array of value names or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DoesRegistryKeyExistInCurrentUserRoot(System.String)">
            <summary>
            Determines if a key exists in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>True if key exists, false if it does not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DoesRegistryKeyExistInLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Determines if a key exists in the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if key exists, false if it does not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.SetRegistryFromCurrentUserRoot(System.String,System.String,System.Object)">
            <summary>
            Sets a value in the registry from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.SetRegistryFromCurrentUserRoot(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry from the HKCU root Registry.
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <param name="valueKind">RegistryValueKind type. Supported types are DWord, QWord</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.SetRegistryFromLocalMachineRoot(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Sets a value in the registry from the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <param name="use64Bit">optional, if set to true, it uses the 64 bit registry, otherwise defaults to 32 bit</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistryKeyFromCurrentUserRoot(System.String)">
            <summary>
            Deletes the specified registry key and all subkeys in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistryKeyFromLocalMachineRoot(System.String,System.Boolean)">
            <summary>
            Deletes the specified registry key and all subkey sin the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistryValueFromCurrentUserRoot(System.String,System.String)">
            <summary>
            Deletes the specified registry value from a key in the HKCU root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistryValueFromLocalMachineRoot(System.String,System.String,System.Boolean)">
            <summary>
            Deletes the specified registry value from a key in the HKLM root Registry
            </summary>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="use64Bit">if true, it uses the 64 bit registry, otherwise 32 bit is used</param>
            <returns>True if removed, or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValue(Microsoft.Win32.RegistryKey,System.String,System.String,System.Object)">
            <summary>
            Get registry key settings int value.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="defaultOnError">default value on error</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.TryGetRegistryValueKind(Microsoft.Win32.RegistryKey,System.String,System.String,Microsoft.Win32.RegistryValueKind@)">
            <summary>
            Get registry value kind.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="kind">current value kind</param>
            <returns>True if no error, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistryValueNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Get all values under a registry key. If none, an empty array is returned.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.GetRegistrySubKeyNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Get all subkeys under a registry key. If none, an empty array is returned.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DoesRegistryKeyExist(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Checks if registry key exists
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>current value or null in case</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.SetRegistryValue(Microsoft.Win32.RegistryKey,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Set registry key settings value.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <param name="value">value to set</param>
            <param name="valueKind">&gt;RegistryValueKind type. Supported types are DWord, QWord</param>
            <returns>true if set or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistrySubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Deletes registry subkey and removes all child subkeys.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <returns>true if deleted or false if error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.RegistryTools.DeleteRegistryValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Deletes registry value from the specified subkey.
            </summary>
            <param name="rootKey">Root key entry</param>
            <param name="regKeyPath">Path to the registry key in the format key\subkey\subsubkey</param>
            <param name="regKeyName">Variable name under the key</param>
            <returns>true if deleted or false if error</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse">
            <summary>
            HttpWeb response wrapper with stream implementation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse.ErrorCode">
            <summary>
            Gets or sets response error code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse.ExceptionCode">
            <summary>
            Gets or sets response exception code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse.Response">
            <summary>
            Gets or sets response itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse.StatusCode">
            <summary>
            Gets or sets response status code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse.GetResponseStream">
            <summary>
            Get response as a stream.
            </summary>
            <returns>Response stream</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.StringExtensions">
            <summary>
            Extend several strings methods
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Join string together using "separator" string as separator
            </summary>
            <param name="values">string array</param>
            <param name="separator">separator string </param>
            <returns>new string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check whether string is null or contains whitespaces only
            </summary>
            <param name="value">string to validate</param>
            <returns>result of operation</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Internal.TaskExtensions">
            <summary>
            Task extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Internal.TaskExtensions.SwallowException(System.Threading.Tasks.Task)">
             <summary>
             Swallow exceptions for event handlers.
             http://theburningmonk.com/2012/10/c-beware-of-async-void-in-your-code/
            
             We need to read an Exception to prevent throwing an Exception for
             .NET 4.0 and below. See
             http://stackoverflow.com/questions/25691114/where-does-an-async-task-throw-exception-if-it-is-not-awaited
             </summary>
             <param name="task">Task to swallow exception for</param>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>9alYqZGbfjDnzoy/w6Ad2qdIY+s6iYZGWWaoyhfjrG8=</DigestValue></Reference></SignedInfo><SignatureValue>A5thnOq4PGOWujyyxMVwdnphid9LfXl+lDBo7tS56dIXL3zEOo9f0FjGA1iBlWXYXfWYvgl+Vz98rk0ccM1nMj+c8HkHh6YGcGhWwHMA9WEMDIpAU7+KYfmU4YxN0fdCXzIBCUUR07OEHykwM3hy1WzUNg8H/DO0L0HrWkIt2qS30SJvKk2ZiJkC4/bAgz5CUrYEtPNJeLCx7Y8917hBWFTTYK1G2Y3f2uvGpoLVXdBOtIfkJ0nj4lQJYt2L5ifTxfa5m9aLJjP+2oaAaYWcNTr6znGxq6jW+H5jwnw81N8d9N+cBrSfvDaeKhUAg+ww40IbsUMgT9Xyo60leZ8QGA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>

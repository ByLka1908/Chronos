<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceHub.Framework</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.StartActivityExtension">
            <summary>
            Extensions to <see cref="T:System.Diagnostics.TraceSource" /> for activity tracing.
            </summary>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Starts a new activity scope.
            </summary>
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String,System.Object[])" />
            <returns>A value to dispose to end the activity.</returns>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String)">
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String,System.Object[])" />
        </member>
        <member name="T:System.Diagnostics.StartActivityExtension.TraceActivity">
            <remarks>
            In order for activity tracing to happen, the <see cref="T:System.Diagnostics.TraceSource" /> needs to
            have <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" /> enabled.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StartActivityExtension.TraceActivity" /> struct
            and applies the new activity to the <see cref="P:System.Diagnostics.Trace.CorrelationManager" />.
            </summary>
            <param name="traceSource">
            The <see cref="T:System.Diagnostics.TraceSource" /> that will receive the <see cref="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)" />, start and stop activity logs.
            Activity tracing requires that the <see cref="P:System.Diagnostics.TraceSource.Switch" /> property of this object must have its <see cref="P:System.Diagnostics.TraceSwitch.Level" /> property set to include <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" />.
            </param>
            <param name="displayName">The activity name.</param>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)" />
            <param name="traceSource"><inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)" path="/param[@name='traceSource']" /></param>
            <param name="displayNameFormat">The format for the activity name.</param>
            <param name="displayNameFormattingArgs">Formatting args for the <paramref name="displayNameFormat" /> string.</param>
        </member>
        <member name="P:System.Diagnostics.StartActivityExtension.TraceActivity.DisplayName">
            <summary>
            Gets the display name for this activity.
            </summary>
        </member>
        <member name="P:System.Diagnostics.StartActivityExtension.TraceActivity.Id">
            <summary>
            Gets the activity ID which is set to <see cref="P:System.Diagnostics.CorrelationManager.ActivityId" /> when this activity is on the top of the activity stack.
            </summary>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.Dispose">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs">
            <summary>
            Describes changes to brokered service availability as raised by the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.#ctor(System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs" /> class
            with an exhaustive set of impacted services.
            </summary>
            <param name="impactedServices">The set of services that are impacted by the change.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.#ctor(System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs" /> class.
            </summary>
            <param name="impactedServices">The set of services that are impacted by the change.</param>
            <param name="otherServicesImpacted">A value indicating whether other services not included in <see cref="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices" /> may also be impacted.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices">
            <summary>
            Gets the set of services that are impacted by the change.
            </summary>
            <remarks>
            Services in this set may have been added, removed, or proffered by a different <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            such that a service's implementation or location has changed.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.OtherServicesImpacted">
            <summary>
            Gets a value indicating whether other services not included in <see cref="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices" />
            may also be impacted.
            </summary>
            <remarks>
            This may be true when an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> is proffered, changed, or removed without exhaustively enumerating the services it may offer.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter">
            <summary>
            Converts between <see cref="T:System.Globalization.CultureInfo" /> and a string representation which is its <see cref="P:System.Globalization.CultureInfo.Name" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.DisposableBag">
            <summary>
            A thread-safe collection of disposable objects.
            </summary>
            <remarks>
            The objects are guaranteed to be disposed exactly once when or after this collection is disposed.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.DisposableBag.IsDisposed">
            <summary>
            Gets a value indicating whether this bag has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposableBag.DisposeAsync">
            <summary>
            Disposes of all contained values.
            </summary>
            <returns>A task that completes after all values have been disposed.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposableBag.AddDisposable(System.IDisposable)">
            <summary>
            Arranges to dispose of a value when this <see cref="T:Microsoft.ServiceHub.Framework.DisposableBag" /> is disposed of, or immediately if the bag is already disposed.
            </summary>
            <param name="disposable">The value to dispose.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposableBag.TryAddDisposable(System.IAsyncDisposable)">
            <summary>
            Arranges to dispose of a value when this <see cref="T:Microsoft.ServiceHub.Framework.DisposableBag" /> is disposed of.
            </summary>
            <param name="disposable">The value to dispose.</param>
            <returns><see langword="true" /> if the value was added to the bag; <see langword="false" /> if the bag was already disposed and the caller must dispose of this value.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.DisposeAction">
            <summary>
            Invokes an <see cref="T:System.Action" /> delegate upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposeAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.DisposeAction" /> class.
            </summary>
            <param name="action">The delegate to invoke upon disposal.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposeAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers">
            <summary>
            Extension methods used via reflection in Microsoft.ServiceHub.HostStub.IServiceManager inside of the DevCore repository inside of Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetServiceBrokerAsync(Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> extension method for getting an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to get the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> from.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> referenced in the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> or null if one is not referenced.</returns>
            <devremarks>
            This is called via reflection from Microsoft.ServiceHub.HostStub.ServiceManager.GetServiceBrokerFromServiceActivationOptionsAsync so that the
            <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> can be passed directly to the constructor of a ServiceHub service.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetAuthorizationServiceClientAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> extension method for getting a <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" />.
            </summary>
            <param name="broker">The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to get the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> from.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation or null if the
            service wasn't found.</returns>
            <devremarks>
            This called via reflection from Microsoft.ServiceHub.HostStub.ServiceManager.GetServiceFactoryCreateAsyncArguments so that an
            <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> can be passed directly to the constructor of a ServiceHub service.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.SetupRpcConnectionAsync(System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.IO.Stream,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Diagnostics.TraceSource,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Helper method for setting up RpcConnection for hosted services.
            </summary>
            <param name="getRpcObject">The method reference to get the ServiceFactoryResult from ServiceFactory that accepts input <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</param>
            <param name="stream">Stream.</param>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the requested service.</param>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> for the requested service.</param>
            <param name="traceSource">The default <see cref="T:System.Diagnostics.TraceSource" /> object.</param>
            <param name="completionTask">The method reference to get the completion task from <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" />.</param>
            <returns>&gt;Local RPC service object.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetServiceMonikerForRequestingService(System.String,System.String)">
            <summary>
            Helper method for constructing a <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> with the version of the service getting activated.
            </summary>
            <param name="name">The service name.</param>
            <param name="version">Version of service.</param>
            <returns>The service moniker for service.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetVersionInformationFromServiceActivationOptions(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Helper method for getting the version information from <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ActivationArguments" />.
            </summary>
            <param name="serviceActivationOptions">The serviceActivationOptions.</param>
            <returns>The value that is associated for the requested service version.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetServiceBrokerServerPipeName(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Gets the pipe name that the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> is available over from the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to get the pipe name from.</param>
            <returns>The pipe name or an empty string if there isn't one.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.DeserializeServiceActivationOptions(System.String)">
            <summary>
            Deserializes a string representing a serialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> object.
            </summary>
            <param name="serializedServiceActivationOptions">Serialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</param>
            <returns>The deserialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</returns>
            <remarks>
            This method is invoked through reflection from Microsoft.ServiceHub.HostStub.ServiceManager.StartService.
            Having a method specifically for this avoids us having to load Newtonsoft.Json explicitly through reflection.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.RemoveServiceBrokerPipeNameFromServiceActivationOptions(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Removes the "__servicehub__ServiceHubRemoteServiceBrokerPipeName" from the ActivationArguments of
            a <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to remove the service broker pipe name from.</param>
            <returns>The updated <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.FrameworkServices">
            <summary>
            Services and service contracts that provide core infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker">
            <summary>
            The descriptor for a remote service broker.
            </summary>
            <remarks>
            This descriptor defines the default protocol used to communicate with an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.
            The moniker is irrelevant because this service is not queried for.
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.FrameworkServices.Authorization">
            <summary>
            The descriptor for the authorization service.
            </summary>
            <remarks>
            This descriptor defines the default protocol used to communicate with an <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            Requests for this service should include client credentials to impersonate a client other than the local process hosting the authorization service.
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteBrokeredServiceManifest">
            <summary>
            The <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the manifest service which discloses information about services available at a remote source.
            </summary>
            <remarks>
            This descriptor defines the default protocol used to communicate with an <see cref="T:Microsoft.ServiceHub.Framework.Services.IBrokeredServiceManifest" />.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor">
            <summary>
            A <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> derived type that applies camelCase naming transforms to method and event names
            and trims off any trailing "Async" suffix.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.#ctor(Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.CreateConnection(StreamJsonRpc.JsonRpc)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IIpcServer">
            <summary>
            Describes an inter-process communication (IPC) server.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IIpcServer.Name">
            <summary>
            Gets the name of the pipe used to connect to this server.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IIpcServer.TraceSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceSource" /> that this server will log to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IIpcServer.Completion">
            <summary>
            Gets a task that completes when the server has stopped listening for incoming connections.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IJsonRpcLocalProxy">
            <summary>
            An interface that local proxy objects may implement to generate proxies for other types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IJsonRpcLocalProxy.ConstructLocalProxy``1">
            <summary>
            Creates a local proxy for a new type that targets the same underlying object as the current proxy.
            </summary>
            <typeparam name="T">Type of the interface to create a proxy for.</typeparam>
            <returns>An instance of T or null if the underlying object does not implement T.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.INotifyDisposable">
            <summary>
            An interface that offers notification after the implementing object is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.INotifyDisposable.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
            <remarks>
            <para>If the object has already been disposed, an attempt to add a handler will result in
            the handler being invoked synchronously before the returning without retaining a reference.</para>
            <para>Once disposed, all references to handlers are removed.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker">
            <summary>
            An <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> which proffers all services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            over named pipes on Windows or Unix domain sockets on other operating systems.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.disposedEvent">
            <summary>
            An event to set upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">The service broker whose services are to be exposed.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.TraceSource">
            <summary>
            Gets the logging mechanism.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed of.
            </summary>
            <remarks>
            This event will occur when the client disconnects from the relay,
            if the RPC library is configured to dispose target objects at that time.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes managed and unmanaged resources owned by this instance.
            </summary>
            <param name="disposing"><see langword="true" /> if this object is being disposed; <see langword="false" /> if it is being finalized.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IpcServer">
            <summary>
            A server that invokes a callback whenever a client connects to it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcServer.#ctor(Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions,System.Func{System.IO.Stream,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.IpcServer" /> class.
            </summary>
            <param name="options">IPC server options.</param>
            <param name="createAndConfigureService">The callback that is invoked when a client connects to the server.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcServer.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcServer.Completion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcServer.TraceSource">
            <summary>
            Gets a trace source used for logging.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcServer.Options">
            <summary>
            Gets the server options.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcServer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcServer.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <returns>A task tracking the work.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker">
            <summary>
            Describes a remotable service broker.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.AvailabilityChanged">
            <summary>
            Occurs when a service previously queried for since the last <see cref="E:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.AvailabilityChanged" /> event may have changed availability.
            </summary>
            <remarks>
            Not all service availability changes result in raising this event.
            Only those changes that impact services queried for on this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance
            will result in an event being raised. Changes already broadcast in a prior event are not included in a subsequent event.
            The data included in this event may be a superset of the minimum described here.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <summary>
            Introduces the client to the server to detail the client's capabilities.
            </summary>
            <param name="clientMetadata">The environment, capabilities and attributes of a client of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task representing this async call.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when this service broker does not support any of the supported service connection kinds that the client offered
            in <see cref="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.SupportedConnections" />.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Gets a pipe to a service.
            </summary>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Instructions for how the client may connect to the service.</returns>
            <remarks>
            Upon successful completion, resources may have already been allocated for the anticipated connection.
            If the connection will not be made (either because the client lost interest or cannot follow the instructions),
            the client should call <see cref="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.CancelServiceRequestAsync(System.Guid)" /> with the value of
            <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId" /> to release the allocated resources.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <summary>
            Releases resources allocated as a result of a prior call to <see cref="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)" />
            when the client cannot or will not complete the connection to the requested service.
            </summary>
            <param name="serviceRequestId">The value of <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId" /> from the connection instructions that will not be followed.</param>
            <returns>A task representing the request to cancel.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IServiceBroker">
            <summary>
            Provides access to arbitrary services by activating them if necessary and returning an object that may be used to communicate with it.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged">
            <summary>
            Occurs when a service previously queried for since the last <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event may have changed availability.
            </summary>
            <remarks>
            Not all service availability changes result in raising this event.
            Only those changes that impact services queried for on this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance
            will result in an event being raised. Changes already broadcast in a prior event are not included in a subsequent event.
            The data included in this event may be a superset of the minimum described here.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceDescriptor">An descriptor of the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The client proxy that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            This should be disposed when no longer required if the instance returned implements <see cref="T:System.IDisposable" />.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The duplex pipe that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            This should be disposed when no longer required.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            Thrown when a service discovery or activation error occurs,
            or when the only service activation option is local service host activation since this overload
            does not accept a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> parameter.
            </exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ExceptionFormatter">
            <summary>
            Extension methods that help convert exceptions to formatted strings.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ExceptionFormatter.ToStringWithInnerExceptions(System.Exception)">
            <summary>
            Converts the exception to a string, recursively expanding inner exceptions.
            </summary>
            <param name="exception">The exception to convert.</param>
            <returns>The string representation fo the exception.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ExceptionFormatter.GetMessageWithInnerExceptions(System.Exception)">
            <summary>
            Gets the exception messages from an exception recursively looking into the inner exceptions.
            </summary>
            <param name="exception">An exception.</param>
            <returns>A formatted string with the exception messages.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ExceptionFormatter.FormatException(System.Exception,System.String,System.Object[])">
            <summary>
            Format an exception into a readable string.
            </summary>
            <param name="exception">The exception to format.</param>
            <param name="format">An additional string message to include in the string.</param>
            <param name="args">Arguments to be used in the format string.</param>
            <returns>A formatted string representing the exception.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.TraceSourceExtensions">
            <summary>
            A class containing extension methods for <see cref="T:System.Diagnostics.TraceSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.TraceSourceExtensions.TraceException(System.Diagnostics.TraceSource,System.Exception)">
            <summary>
            Traces an exception to the trace source as an error level message.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="exception">An exception.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.TraceSourceExtensions.TraceException(System.Diagnostics.TraceSource,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an exception to the trace source as an error level message.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="exception">An exception.</param>
            <param name="format">Additional string to write out.</param>
            <param name="args">Arguments to be used in the format string.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker">
            <summary>
            An <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> which proffers all services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            over an existing <see cref="T:Nerdbank.Streams.MultiplexingStream" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.serviceBroker">
            <summary>
            The broker whose services are relayed by this instance.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithClient">
            <summary>
            The multiplexing stream shared with the client. Never null.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.channelsOfferedToClient">
            <summary>
            The multiplexing channels currently offered (and not yet accepted or rejected) to the client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.disposedEvent">
            <summary>
            An event to set upon disposal.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithRemoteClientOwned">
            <summary>
            A value indicating whether to dispose of the <see cref="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithClient" /> upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker,Nerdbank.Streams.MultiplexingStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">The service broker whose services should be multiplexed to the <paramref name="multiplexingStreamWithClient" />.</param>
            <param name="multiplexingStreamWithClient">The multiplexing stream to proffer services on.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed of.
            </summary>
            <remarks>
            This event will occur when the client disconnects from the relay,
            if the RPC library is configured to dispose target objects at that time.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.ConnectToServerAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> class
            and establishes a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> protocol with the client over the given stream.
            </summary>
            <param name="serviceBroker">A broker for services to be relayed.</param>
            <param name="duplexStreamWithClient">
            The duplex stream over which the client will make RPC calls to the returned <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> instance.
            A multiplexing stream will be established on this stream and the client is expected to accept an offer for a channel with an <see cref="F:System.String.Empty" /> name.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> that provides access to remote services, all over a multiplexing stream.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and/or unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose of managed resources as well as unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.PolyfillExtensions">
            <summary>
            Extension methods to make multi-targeting require fewer <c>#if</c> regions.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker">
            <summary>
            Exposes a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service as a local <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.multiplexingStreamOwned">
            <summary>
            A value indicating whether to dispose of the <see cref="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.multiplexingStream" /> upon disposal.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.traceSource">
            <summary>
            The backing field for the <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceSource" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.clientMetadata">
            <summary>
            The data sent in the last handshake.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.authorizationServiceClient">
            <summary>
            The authorization service that can acquire fresh client credentials.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="remoteServiceBroker">The proxy to the remote service broker.</param>
            <param name="clientMetadata">The client metadata transmitted in the handshake.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that may utilize a multiplexing stream to proffer services.
            </summary>
            <param name="remoteServiceBroker">The proxy to the remote service broker.</param>
            <param name="multiplexingStream">The multiplexing stream on which the requested services may be exposed. Must not be null.</param>
            <param name="clientMetadata">The client metadata transmitted in the handshake.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.RemoteServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.ServiceRequestFailure">
            <summary>
            Indicates a failure in requesting a service (not just a negative result from the remote service broker).
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.RequestedServiceUnavailable">
            <summary>
            Indicates a response for a service indicates the service was not available.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.IncompatibleServiceConnection">
            <summary>
            Indicates the remote service broker proposed we connect to a service using a means we did not support.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.ServiceConnectionFailure">
            <summary>
            A service was offered, but a failure occurred while trying to connect to it.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.Disposed">
            <summary>
            This instance was explicitly disposed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed or the underlying <see cref="T:System.IO.Stream" /> it was created with (if applicable) is closed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceSource">
            <summary>
            Gets or sets the <see cref="T:System.Diagnostics.TraceSource" /> this instance will use for trace messages.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that connects to an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> on the default channel
            after establishing a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on the given <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="duplexStream">
            A full duplex stream on which to create a multiplexing stream.
            This multiplexing stream is expected to offer a default channel (<see cref="F:System.String.Empty" /> name) with a
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(System.IO.Stream,Nerdbank.Streams.MultiplexingStream.Options,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that connects to an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> on the default channel
            after establishing a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on the given <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="duplexStream">
            A full duplex stream on which to create a multiplexing stream.
            This multiplexing stream is expected to offer a default channel (<see cref="F:System.String.Empty" /> name) with a
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="options">Options to pass along to the created <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on creation.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">
            An existing proxy established to acquire remote services.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="multiplexingStream">A multiplexing stream that underlies the <paramref name="serviceBroker" /> proxy.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(System.IO.Pipelines.IDuplexPipe,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="pipe">
            A duplex pipe over which to exchange JSON-RPC messages with an
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be completed when the returned value is disposed,
            or completed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="pipeName">
            The name of a pipe over which to exchange JSON-RPC messages with an
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">
            An existing proxy established to acquire remote services.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.OfferLocalServiceHostAsync(System.Threading.CancellationToken)">
            <summary>
            Offers the local environment as a host for services proffered by the remote service broker when they can be activated locally.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes after the service broker has acknowledged the local service host.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.SetAuthorizationService(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Sets the authorization service to use to obtain the default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />
            for all service requests that do not explicitly provide it.
            </summary>
            <param name="authorizationService">The authorization service. May be <see langword="null" /> to clear a previously set value.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
            <remarks>
            This method is free threaded, but not thread-safe. It should not be called concurrently with itself.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.SetAuthorizationService(Microsoft.ServiceHub.Framework.Services.IAuthorizationService)">
            <summary>
            Sets the authorization service to use to obtain the default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />
            for all service requests that do not explicitly provide it.
            </summary>
            <param name="authorizationService">The authorization service. May be <see langword="null" /> to clear a previously set value.</param>
            <remarks>
            This method is free threaded, but not thread-safe. It should not be called concurrently with itself.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and/or unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose of managed resources as well as unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.RemoteServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ActivateLocalService(Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation)">
            <summary>
            Activates a service within the current AppDomain.
            </summary>
            <param name="serviceActivation">Details on which service to activate.</param>
            <returns>The activated service object.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetLocalServiceHostInformation">
            <summary>
            Prepares a description of the kind of service host we can proffer.
            </summary>
            <returns>A description of our own local service host capabilities.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo">
            <summary>
            Describes how to connect to a provisioned remote service.
            </summary>
            <remarks>
            An initialized instance of this struct is expected to represent exactly one connection mechanism.
            </remarks>
            <devremarks>
            When adding connection styles to this struct, be sure to add a value to <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceConnections" /> to match.
            </devremarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId">
            <summary>
            Gets or sets the ID assigned to the service request that this instance is in response to.
            </summary>
            <remarks>
            This value is useful when canceling this service request without connecting to it.
            If null, no resources are allocated for this service prior to the client connecting to it,
            and thus no resources need to be released if the client decides not to connect.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.MultiplexingChannelId">
            <summary>
            Gets or sets the ID of the channel created over the remote service broker's multiplexing stream where the activated service is listening.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.PipeName">
            <summary>
            Gets or sets the name of an IPC pipe to connect to where the activated service is listening.
            On Windows this is a named pipe, whereas on OSX/Linux this is the path to a unix domain socket.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.ClrActivation">
            <summary>
            Gets or sets instructions to activate the service within the client process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.IsEmpty">
            <summary>
            Gets a value indicating whether this instance represents no connection information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.IsOneOf(Microsoft.ServiceHub.Framework.RemoteServiceConnections)">
            <summary>
            Checks whether this instance contains instructions for any of a set of connection types.
            </summary>
            <param name="connections">The set of connection types to test for.</param>
            <returns>
            <see langword="true" /> if any of the <paramref name="connections" /> specified coincide with instructions available in this value; <see langword="false" /> otherwise.
            <see langword="false" /> is returned if <paramref name="connections" /> is set to <see cref="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.None" />.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.ThrowIfOutsideAllowedConnections(Microsoft.ServiceHub.Framework.RemoteServiceConnections)">
            <summary>
            Throws an exception if the connection info is non-empty yet contains only activation details that
            are not supported.
            </summary>
            <param name="allowedConnections">The set of supported activation details.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation">
            <summary>
            Describes activation instructions for a CLR-based service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation" /> class.
            </summary>
            <param name="assemblyPath">the local path to the assembly to be loaded.</param>
            <param name="fullTypeName">the full name (not including assembly name qualifier) of the type that serves as the entrypoint and (if applicable) the RPC target for the service.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.AssemblyPath">
            <summary>
            Gets the local path to the assembly to be loaded.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.FullTypeName">
            <summary>
            Gets the full name (not including assembly name qualifier) of the type
            that serves as the entrypoint and (if applicable) the RPC target for the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnections">
            <summary>
            Identifies the connections that are supported for a remote service connection.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.None">
            <summary>
            No connection types.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.Multiplexing">
            <summary>
            Supports multiplexing channels across the existing stream shared between the remote service broker and its client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.IpcPipe">
            <summary>
            Supports opening an IPC pipe between service and its client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.ClrActivation">
            <summary>
            Supports sharing assembly path and full name of the type that represents the service (e.g. its entrypoint and RPC target).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServerFactory">
            <summary>
            A static class for creating named pipe servers.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServerFactory.StandardPipeOptions">
            <summary>
            The standard pipe options to use.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.CreateAsync(System.String,System.Diagnostics.TraceSource,System.Func{System.IO.Stream,System.Threading.Tasks.Task})">
            <summary>
            Creates a named pipe server.
            </summary>
            <param name="pipeName">The name of the server. Typically just the result of calling <see cref="M:System.Guid.ToString" /> on the result of <see cref="M:System.Guid.NewGuid" />. This should <em>not</em> include path separators.</param>
            <param name="logger">The logger for the server.</param>
            <param name="onConnectedCallback"><inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServerFactory.Create(System.Func{System.IO.Stream,System.Threading.Tasks.Task},Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions)" path="/param[@name='onConnectedCallback']" /></param>
            <returns>
            A tuple where <c>Server</c> is disposable to shut down the pipe, and <c>ServerName</c> is the pipe name as the client will need to access it. It implements <see cref="T:System.IAsyncDisposable" />.
            <c>ServerName</c> will typically be the same as <paramref name="pipeName" /> on Windows, but on mac/linux it will have a path prepended to it.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.Create(System.Func{System.IO.Stream,System.Threading.Tasks.Task},Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions)">
            <summary>
            Creates an IPC server.
            </summary>
            <param name="onConnectedCallback">
            Callback function to be run whenever a client connects to the server. This may be called concurrently if multiple clients connect.
            The delegate may choose to return right away while still using the <see cref="T:System.IO.Stream" /> or to complete only after finishing communication with the client.
            </param>
            <param name="options">IPC server options.</param>
            <returns>
            The server, which includes a means to obtain its pipe name and monitor for completion.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.ConnectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServerFactory.ConnectAsync(System.String,Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.ConnectAsync(System.String,Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions,System.Threading.CancellationToken)">
            <summary>
            Connects to an IPC pipe that was created with <see cref="M:Microsoft.ServiceHub.Framework.ServerFactory.Create(System.Func{System.IO.Stream,System.Threading.Tasks.Task},Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions)" />.
            </summary>
            <param name="pipeName">A fully-qualified pipe name, including the path. On Windows the prefixed path should be <c>\\.\pipe\</c>.</param>
            <param name="options">Options that can influence how the IPC pipe is connected to.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The duplex stream established over the pipe.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.PrependPipePrefix(System.String)">
            <summary>
            Prepends the OS-specific prefix to a simple pipe name.
            </summary>
            <param name="leafPipeName">The simple pipe name. This should <em>not</em> include a path.</param>
            <returns>The fully-qualified, OS-specific pipe name.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.TrimWindowsPrefixForDotNet(System.String)">
            <summary>
            Removes the prefix from a pipe name if it is fully-qualified and on Windows where the prefix should <em>not</em> be used in the .NET APIs.
            </summary>
            <param name="fullyQualifiedPipeName">The fully-qualified path.</param>
            <returns>The pipe name to use with .NET APIs. This <em>may</em> still be fully-qualified.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.ConnectWithRetryAsync(System.IO.Pipes.NamedPipeClientStream,System.IO.Pipes.PipeOptions,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary>
            Connects to a named pipe without spinning the CPU as <see cref="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)" /> or <see cref="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)" /> would do.
            </summary>
            <param name="npcs">The named pipe client stream to connect.</param>
            <param name="pipeOptions">The pipe options applied to this connection.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
            <param name="withSpinningWait">Whether or not the connect should be attempted with a spinning wait.
            If the pipe being connected to is known to exist, it is safe to use a spinning wait to avoid potentially throwing exceptions for retries.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that tracks the asynchronous connection attempt.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions">
            <summary>
            Options that can influence the IPC server.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.Name">
            <summary>
            Gets the fully-qualified name of the pipe to accept connections to.
            </summary>
            <remarks>
            This should include the <c>\\.\pipe\</c> prefix on Windows, or the absolute path to a file to be created on linux/mac.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.TraceSource">
            <summary>
            Gets the means of logging regarding connection attempts.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.AllowMultipleClients">
            <summary>
            Gets a value indicating whether to serve more than one incoming client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.PipeOptions">
            <summary>
            Gets the options to use on the named pipes.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions">
            <summary>
            Options that can influence the IPC client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.FailFast">
            <summary>
            Gets a value indicating whether to fail immediately with a <see cref="T:System.TimeoutException" /> if the server is not ready to accept the connection.
            When this is <see langword="false" />, continuously retry or wait for the server to listen for and respond to connection requests
            until it is canceled.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.CpuSpinOverFirstChanceExceptions">
            <summary>
            Gets a value indicating whether to prefer a CPU spinning wait over throwing first chance exceptions as a way to periodically sleep while waiting.
            </summary>
            <remarks>
            This property is only meaningful when <see cref="P:Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.FailFast" /> is <see langword="false" />.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException">
            <summary>
            Used to indicate a failure in a <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to activate a service that was found.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationFailedException.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException" /> class.
            </summary>
            <param name="serviceMoniker">The moniker of the service that failed to activate.</param>
            <param name="inner">The exception thrown from the service during activation.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException" /> class.
            </summary>
            <param name="info">Seralization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions">
            <summary>
            Activation options that may optionally be supplied to a service when activating it.
            </summary>
            <remarks>
            This type must use only built-in types since every applicable <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> is required to be able to directly serialize it.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ActivationArguments">
            <summary>
            Gets or sets a map of arbitrary data, presumably meaningful to the service.
            </summary>
            <value>May be null.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials">
            <summary>
            Gets or sets a map that describes the client's identity in terms that an identity or authorization service can interpret.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture">
            <summary>
            Gets or sets the client's preferred culture.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture">
            <summary>
            Gets or sets the client's preferred UI culture.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientRpcTarget">
            <summary>
            Gets or sets an RPC target that the client offers to the requested service so the service can invoke members on the client.
            </summary>
            <remarks>
            This object is never serialized.
            If the service is available locally this object is made available directly to the service.
            If the service is remote, the remote service broker client such as <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> should set this object as the local RPC target when setting up an RPC connection,
            and the service-side should set up a proxy for this object based on the type given in <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ClientInterface" />.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.MultiplexingStream">
            <summary>
            Gets or sets the <see cref="T:Nerdbank.Streams.MultiplexingStream" /> associated with the connection
            between the client and the service broker.
            This may be used to establish additional channels between client and service.
            </summary>
            <remarks>
            This object is never serialized.
            If the service is available locally this object can be ignored by the broker and service because client and service can exchange streams directly.
            If the service is remote, the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> such as <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> should set this property on the activation options
            before forwarding the request to the final service broker.
            The final service broker should then apply this value to the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> using <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.SetClientDefaults">
            <summary>
            Automatically set properties on this type where possible based on the client environment,
            if they have not already had values assigned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ApplyCultureToCurrentContext">
            <summary>
            Applies the values of <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture" /> and <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture" /> to the current <see cref="T:System.Threading.ExecutionContext" />, if they have been set on this struct.
            </summary>
            <returns>A value to dispose of to revert the <see cref="T:System.Globalization.CultureInfo" /> properties to their prior values.</returns>
            <remarks>
            By surrounding construction of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" /> with the client's applied culture,
            that connection is expected to pick it up and dispatch incoming RPC requests using that culture.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.Equals(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.Equals(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Compares content equality between two dictionaries.
            </summary>
            <param name="dictionary1">The first dictionary.</param>
            <param name="dictionary2">The second dictionary.</param>
            <returns><see langword="true" /> if the two instances are equal; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication">
            <summary>
            A disposable struct for applying and reverting changes to <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication" /> struct and
            applies <see cref="T:System.Globalization.CultureInfo" /> as specified by the owner to the calling thread.
            </summary>
            <param name="newCulture">The new value for <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</param>
            <param name="newUICulture">The new value for <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication.Dispose">
            <summary>Reverts changes to <see cref="T:System.Globalization.CultureInfo" /> that were made by the constructor.</summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator">
            <summary>
            A class that aggregates one or more <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances into one, with various policies applied.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.Sequential(System.Collections.Generic.IReadOnlyList{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Service requests are forwarded to a list of other <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances one-at-a-time.
            The first broker to return a successful response is returned to the caller.
            </summary>
            <param name="serviceBrokers">A list of service brokers aggregated into the new one. This collection is stored; not copied. The collection should *not* be modified while the returned broker is in use.</param>
            <returns>The aggregate service broker.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.Parallel(System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Service requests are forwarded to a list of other <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances in parallel.
            At most one broker is allowed to respond with a service or all results are disposed and an exception is thrown.
            </summary>
            <param name="serviceBrokers">A collection of service brokers aggregated into the new one. This collection is stored; not copied. The collection should *not* be modified while the returned broker is in use.</param>
            <returns>The aggregate service broker.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshal(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that forces all RPC calls to be marshaled even if a service is available locally.
            </summary>
            <param name="serviceBroker">The inner service broker.</param>
            <returns>The marshaling service broker.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker">
            <summary>
            A broker which will query many other brokers sequentially, and return the first successful result.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker" /> class.
            </summary>
            <param name="serviceBrokers">A list of brokers to use. This collection is stored; not copied.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker">
            <summary>
            A broker which will query many other brokers in parallel, but assert that at most one service comes back.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker" /> class.
            </summary>
            <param name="serviceBrokers">A collection of brokers to use. This collection is stored; not copied.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker">
            <summary>
            Wraps an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> such that any locally provisioned service is forced to marshal all calls anyway.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient">
            <summary>
            A wrapper around <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that caches and shares client proxies.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.joinableTaskFactory">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that can be used to mitigate deadlocks. May be null.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.clientCache">
            <summary>
            A cache of current (non-stale) proxies.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.rentedProxies">
            <summary>
            A map of any currently rented proxies with a count of open rentals.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.availabilityChangedHookedUp">
            <summary>
            A flag indicating whether the <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ServiceBroker_AvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)" />
            handler has been wired up to the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event on
            <see cref="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.serviceBroker" /> already.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.lastInvalidationEventCancellationSource">
            <summary>
            The source for a <see cref="T:System.Threading.CancellationToken" /> which was handed to the last raising of the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.serviceBroker">
            <summary>
            The inner <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> from which client proxies are obtained.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.staleRentedProxies">
            <summary>
            The set of proxies that are stale but still being rented.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient" /> class.
            </summary>
            <param name="serviceBroker">The underlying service broker.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ClientProxiesInvalidatedEventHandler">
            <summary>
            The delegate for a handler of the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
            <param name="sender">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient" /> instance that is raising the event.</param>
            <param name="args">Details regarding which services actually changed that led to this event being raised.</param>
            <param name="cancellationToken">A token that is canceled when the new set of services begun with this event is itself invalidated.</param>
            <returns>A task whose completion will allow a subsequent invocation of this event handler.</returns>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated">
            <summary>
            Occurs when previously acquired proxies have gone stale.
            </summary>
            <remarks>
            <para>
            Handlers should release any outstanding rentals at their earliest convenience and use <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> to get new proxies.
            Exceptions thrown or faulted tasks returned by the handler are ignored.
            </para>
            <para>
            Handlers return a <see cref="T:System.Threading.Tasks.Task" /> to they can carry out asynchronous operations such as acquiring and initializing new services without fear that another invocation of their handler will happen concurrently.
            Any further invalidation event will await for handlers of the prior event to complete before raising the next one. The <see cref="T:System.Threading.CancellationToken" /> provided to the earlier invocation signals that a follow-up event is waiting to be raised to reset the services again.
            Note however that even if the event handler has not yet completed, all calls to <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> will always return a proxy to the most current service available.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.InvalidationSemaphore">
            <summary>
            Gets the semaphore that is entered to raise the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
            <remarks>
            This can be used to enter the same semaphore during initialization in order to ensure that an <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event does not disrupt initialization.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            The same client proxy is returned for a given service and proxy type until it is invalidated.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceRpcDescriptor">An descriptor of the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A rental around the client proxy that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            Proxies are kept alive while "rented", and may be kept alive beyond a rental until they are invalidated.
            The rental struct should be disposed as soon as the caller is done using it (such that the next use will call <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> again and could tolerate getting a client proxy to a different service instance.)
            The client proxy itself within the rental struct should NOT be disposed directly since it can be shared across invocations of this method.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            The same client proxy is returned for a given service and proxy type until it is invalidated.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceRpcDescriptor">An descriptor of the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor. Only used if the service has not already been cached.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A rental around the client proxy that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            Proxies are kept alive while "rented", and may be kept alive beyond a rental until they are invalidated.
            The rental struct should be disposed as soon as the caller is done using it (such that the next use will call <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> again and could tolerate getting a client proxy to a different service instance.)
            The client proxy itself within the rental struct should NOT be disposed directly since it can be shared across invocations of this method.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Dispose">
            <summary>
            Invalidates all previously produced client proxies and disposes this object.
            Any client proxies currently rented will be disposed of when they are all returned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Dispose(System.Boolean)">
            <summary>
            Disposes managed and unmanaged resources held by this instance.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose managed and native resources; <see langword="false" /> to dispose of only native resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.OnInvalidated(Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event and swallows any exceptions thrown by handlers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ServiceBroker_AvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Invalidates proxies of changed services and raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ReleaseRental(Microsoft.VisualStudio.Threading.AsyncLazy{System.Object},System.Object)">
            <summary>
            Releases a rental and disposes of the client proxy if appropriate.
            </summary>
            <param name="clientProxy">The shared client proxy with its lazy wrapper.</param>
            <param name="proxy">The value from the <see cref="T:Microsoft.VisualStudio.Threading.AsyncLazy`1" />, if it could be obtained; otherwise <see langword="null" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.InvalidateProxies(Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Invalidates all current proxies.
            </summary>
            <returns>A list of proxies that are stale and not rented and thus should be disposed of. May be null if no proxies need to be disposed of.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.DisposeOldProxies(System.Collections.Generic.List{System.IDisposable})">
            <summary>
            Disposes old proxies.
            </summary>
            <param name="disposableProxies">The list of proxies to dispose. May be <see langword="null" />.</param>
            <exception cref="T:System.AggregateException">Thrown with all exceptions thrown by proxy <see cref="M:System.IDisposable.Dispose" /> methods.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.EnsureAvailabilityChangedIsHookedUp">
            <summary>
            Adds the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> handler.
            </summary>
            <remarks>
            The caller should have already entered the <see cref="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.syncObject" /> lock
            and confirmed that <see cref="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.IsDisposed" /> is <see langword="false" />.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1">
            <summary>
            Provides access to a client proxy as a rental that should be disposed of to signify no active use, allowing it to be disposed of when invalidated.
            </summary>
            <typeparam name="T">The type of the client proxy.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.#ctor(Microsoft.ServiceHub.Framework.ServiceBrokerClient,Microsoft.VisualStudio.Threading.AsyncLazy{System.Object},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1" /> struct.
            </summary>
            <param name="client">The owner.</param>
            <param name="proxy">The (already evaluated) lazy that we use to track rentals.</param>
            <param name="value">The client proxy itself.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.Proxy">
            <summary>
            Gets the client proxy.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this instance has not been initialized.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed (after being initialized).</exception>
            <remarks>
            This value should NOT be disposed directly since it can be shared across invocations of the <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.IsInitialized">
            <summary>
            Gets a value indicating whether this rental has been initialized (and not yet disposed).
            </summary>
            <remarks>
            This value can be useful to discern between a default <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1" /> instance (where no proxy was yet requested)
            and one which is initialized but with a null proxy because no matching service was found.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.IsDisposed">
            <summary>
            Gets a value indicating whether this rental has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.Dispose">
            <summary>
            Returns the rental of the client proxy, allowing it to be subject to disposal upon invalidation if all rentals have been similarly disposed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata">
            <summary>
            Describes the environment, capabilities and attributes of a client of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.SupportedConnections">
            <summary>
            Gets or sets the remote service connections that the client supports.
            </summary>
            <remarks>
            This allows an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> to choose the optimal mutually supported connection kind
            when responding to future service requests.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.LocalServiceHost">
            <summary>
            Gets or sets metadata regarding the client's environment for use as a potential services host
            for service which are originally requested of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />
            but which services may in fact be available for activation locally within the client's environment.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> interface and related types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceBroker">The service broker.</param>
            <param name="serviceDescriptor">An descriptor of the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The client proxy that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            This should be disposed when no longer required if the instance returned implements <see cref="T:System.IDisposable" />.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor{``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetPipeAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="serviceBroker">The service broker.</param>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The duplex pipe that may be used to communicate with the service; or <see langword="null" /> if no matching service could be found.
            This should be disposed when no longer required.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            Thrown when a service discovery or activation error occurs,
            or when the only service activation option is local service host activation since this overload
            does not accept a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> parameter.
            </exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            <summary>
            Used to indicate when a failure to discover or activate a service occurs.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostInformation">
            <summary>
            Describes important attributes of a service host that are often required to assess compatibility with a service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.OperatingSystem">
            <summary>
            Gets or sets the operating system the service host is running on.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.OperatingSystemVersion">
            <summary>
            Gets or sets the version of the operating system the service host is running on.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.ProcessArchitecture">
            <summary>
            Gets or sets the architecture of the service host process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.Runtime">
            <summary>
            Gets or sets the runtime offered by the service host.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.RuntimeVersion">
            <summary>
            Gets or sets the version of the runtime, if applicable.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem">
            <summary>
            The recognized operating systems that can act as service hosts.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.Windows">
            <summary>
            The Windows operating system.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.Linux">
            <summary>
            The Linux operating system.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.OSX">
            <summary>
            The Mac OSX operating system.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostRuntime">
            <summary>
            The set of recognized runtimes for service hosts.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.None">
            <summary>
            No runtime (i.e. native code only).
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NETFramework">
            <summary>
            The .NET Framework.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NETCore">
            <summary>
            .NET Core.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.Mono">
            <summary>
            Mono.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NodeJS">
            <summary>
            Node.JS.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IDiscoveryService">
            <summary>
            Interface that all ServiceHub discovery services should implement.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IDiscoveryService.DiscoverServiceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Find the location of the configuration file for the given service.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>The full path to the service's configuration file or null if the service was not found.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory">
            <summary>
            Describes a class that can create a ServiceHub service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.CreateAsync(System.IServiceProvider,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of a ServiceHub service asynchronously.
            </summary>
            <param name="hostProvidedServices">Provides other services to the service.</param>
            <param name="serviceMoniker">An identifier for a service.</param>
            <param name="serviceActivationOptions">The activation options used to start the service.</param>
            <param name="serviceBroker">
            The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that can be used to request additional services.
            </param>
            <param name="authorizationServiceClient">
            The <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> retrieved from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <remarks>
            <para>
            Uses <see cref="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)" /> to establishes an RPC connection over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            Adds ServiceHub service object to receive RPC calls and begins listening for incoming messages. The service will only be disposed if the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> does on disconnection.
            </para>
            </remarks>
            <returns>An instance of a ServiceHub service that implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Gets the description of a service.
            </summary>
            <param name="serviceMoniker">An identifier for a service.</param>
            <returns>An instance of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" />.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IServiceHubServiceFactory">
            <summary>
            Describes a class that can create a ServiceHub service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceHubServiceFactory.CreateAsync(System.IO.Stream,System.IServiceProvider,Microsoft.ServiceHub.Framework.ServiceActivationOptions,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient)">
            <summary>
            Creates an instance of a ServiceHub service asynchronously.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> that will be used to communicate with the service.</param>
            <param name="hostProvidedServices">Provides other services to the service.</param>
            <param name="serviceActivationOptions">The activation options used to start the service.</param>
            <param name="serviceBroker">The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that can be used to request additional services.</param>
            <param name="authorizationServiceClient">The <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> retrieved from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</param>
            <returns>An instance of a ServiceHub service.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor">
            <content>
            The <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration" /> nested class.
            </content>
            <summary>
            An RPC descriptor for services that support JSON-RPC.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration">
            <summary>
            Creates and caches proxies generated to wrap local target objects for the <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructLocalProxy``1(``0)" /> method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.GetProxyModuleBuilder(System.Reflection.TypeInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use for generating a proxy for the given type.
            </summary>
            <param name="interfaceType">The type of the interface to generate a proxy for.</param>
            <returns>The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.Get(System.Reflection.TypeInfo)">
            <summary>
            Gets the generated type for a proxy for a given interface.
            </summary>
            <param name="serviceInterface">The interface the proxy must implement.</param>
            <returns>The generated type.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.ExceptionHelper(System.Exception,StreamJsonRpc.ExceptionProcessing)">
            <summary>
            Called from the generated proxy to help prepare the exception to throw.
            </summary>
            <param name="ex">The exception thrown from the target object.</param>
            <param name="exceptionStrategy">The value of <see cref="P:StreamJsonRpc.JsonRpc.ExceptionStrategy" /> to emulate.</param>
            <returns>The exception the generated code should throw.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and no support for opening additional streams except by relying on the underlying service broker to provide one.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and does support for opening additional streams with <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions" />.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
            <param name="multiplexingStreamOptions">The options that a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> may be created with. A <see langword="null" /> value will prevent a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> from being created for the RPC connection.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters">
            <summary>
            The formats that JSON-RPC can be serialized to.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters.UTF8">
            <summary>
            Format messages with UTF-8 text for a human readable JSON representation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters.MessagePack">
            <summary>
            Format messages with MessagePack for a high throughput, compact binary representation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters">
            <summary>
            The various headers that introduce a JSON-RPC message.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters.HttpLikeHeaders">
            <summary>
            Adds an HTTP-like header in front of each JSON-RPC message that describes its encoding and length.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters.BigEndianInt32LengthHeader">
            <summary>
            Adds a big endian 32-bit integer before each JSON-RPC message describing its length.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Protocol">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatter">
            <summary>
            Gets the formatting used by the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiter">
            <summary>
            Gets the mechanism by which message boundaries may be discerned. Some expected values are found in <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy">
            <summary>
            Gets the way exceptions are communicated from the service to the client.
            This is set on the <see cref="P:StreamJsonRpc.JsonRpc.ExceptionStrategy" /> property when the <see cref="T:StreamJsonRpc.JsonRpc" /> instance is created.
            </summary>
            <value>The default value is <see cref="F:StreamJsonRpc.ExceptionProcessing.CommonErrorData" />.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions">
            <summary>
            Gets the options to use when creating a new <see cref="T:Nerdbank.Streams.MultiplexingStream" /> as a prerequisite to establishing an RPC connection.
            </summary>
            <remarks>
            Any non-null value from this property is always <see cref="P:Nerdbank.Streams.MultiplexingStream.Options.IsFrozen">frozen</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.DebuggerDisplay">
            <summary>
            Gets a string for the debugger to display for this struct.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructLocalProxy``1(``0)">
            <summary>
            Wraps some target object with a proxy that gives the caller the similar semantics to calling
            an actual RPC object using <see cref="T:StreamJsonRpc.JsonRpc" />.
            </summary>
            <typeparam name="T">The interface that the returned proxy must implement.</typeparam>
            <param name="target">The object to which all calls to the proxy should be forwarded.</param>
            <returns>The proxy, or null if <paramref name="target" /> is null.</returns>
            <remarks>
            The proxy will forward all calls made to the <typeparamref name="T" /> interface to the <paramref name="target" /> object.
            Exceptions thrown from the target will be caught by the proxy and a <see cref="T:StreamJsonRpc.RemoteInvocationException" /> will be thrown instead
            with some of the original exception details preserved (but not as an <see cref="P:System.Exception.InnerException" />) in order to
            emulate what an RPC connection would be like.
            This proxy implements <typeparamref name="T" />.
            The proxy also implements <see cref="T:System.IDisposable" /> and will forward a call to <see cref="M:System.IDisposable.Dispose" />
            to the <paramref name="target" /> object if the target object implements <see cref="T:System.IDisposable" />.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream.Options)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions" /> property set to a frozen copy of the specified value.
            If a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> has been set, it is cleared.
            </summary>
            <param name="multiplexingStreamOptions">Options to use when setting up a new <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that should be set up on a pipe before initializing RPC; <see langword="null" /> to not set up or use any.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithExceptionStrategy(StreamJsonRpc.ExceptionProcessing)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy" /> property set to a new value.
            </summary>
            <param name="exceptionStrategy">The new value for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy" /> property.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Equals(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Clone">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateConnection(StreamJsonRpc.JsonRpc)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" /> or derived type.
            </summary>
            <param name="jsonRpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> object that will have to be passed to <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.#ctor(StreamJsonRpc.JsonRpc)" />.</param>
            <returns>The new instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" />.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateHandler(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.IJsonRpcMessageHandler" /> for use in a new server or client.
            </summary>
            <param name="pipe">The pipe the handler should use to send and receive messages.</param>
            <param name="formatter">The <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> the handler should use to encode messages.</param>
            <returns>The new message handler.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateJsonRpc(StreamJsonRpc.IJsonRpcMessageHandler)">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.JsonRpc" /> for use in a new server or client.
            </summary>
            <param name="handler">The message handler that the <see cref="T:StreamJsonRpc.JsonRpc" /> instance should use.</param>
            <returns>The new <see cref="T:StreamJsonRpc.JsonRpc" />.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateFormatter">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> for use in a new server or client.
            </summary>
            <returns>The new message formatter.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateSeedChannels">
            <summary>
            Create first seed channel if not being assigned by the owner of the service descriptor.
            Sets the protocol version to be used. 1 is the original. 2 is a
            protocol breaking change backpressure support, 3 is a protocol breaking change and default version that
            removes the initial handshake so no round-trip to establish the connection is necessary.
            </summary>
            <returns>The options that a Nerdbank.Streams.MultiplexingStream may be created.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection">
            <summary>
            A <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" />-derived type specifically for <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.localRpcTargetOptions">
            <summary>
            Backing field for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcTargetOptions" /> property.
            </summary>
            <devremarks>
            Create a new instance of <see cref="T:StreamJsonRpc.JsonRpcTargetOptions" /> every time because it's mutable.
            </devremarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.localRpcProxyOptions">
            <summary>
            Backing field for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcProxyOptions" /> property.
            </summary>
            <devremarks>
            Create a new instance of <see cref="T:StreamJsonRpc.JsonRpcProxyOptions" /> every time because it's mutable.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.#ctor(StreamJsonRpc.JsonRpc)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" /> class.
            </summary>
            <param name="jsonRpc">The JSON-RPC object.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.TraceSource">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcTargetOptions">
            <summary>
            Gets or sets the options to pass to <see cref="M:StreamJsonRpc.JsonRpc.AddLocalRpcTarget(System.Object,StreamJsonRpc.JsonRpcTargetOptions)" /> in the default implementation of <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.AddLocalRpcTarget(System.Object)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcProxyOptions">
            <summary>
            Gets or sets the options to pass to <see cref="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.JsonRpcProxyOptions)" /> in the default implementation of <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.ConstructRpcClient``1" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc">
            <summary>
            Gets the underlying <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc" /> object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.Completion">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.AddLocalRpcTarget(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.ConstructRpcClient``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.StartListening">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1">
            <inheritdoc cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" />
            <typeparam name="T">The RPC interface used to call the service.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class
            and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceMoniker">
            <summary>
            An identifier for an activatable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> class.
            </summary>
            <param name="name">The name of the service.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> class.
            </summary>
            <param name="name">The name of the service.</param>
            <param name="version">The version of the service or expected by the client. May be null.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version">
            <summary>
            Gets the version of the service or the version expected by the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.DebuggerDisplay">
            <summary>
            Gets a string for the debugger to display for this struct.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.op_Equality(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" /> if the left and right operand are equivalent.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.op_Inequality(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" /> if the left and right operand are different.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.Equals(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceMoniker.ServiceMonikerTypeConverter">
            <summary>
            This converter allows Newtonsoft.Json to use <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> as a key in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor">
            <content>
            Contains the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext" /> nested class.
            </content>
            <summary>
            A description of a service to help automate connecting to it.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext">
            <summary>
            A <see cref="T:System.Threading.SynchronizationContext" /> that preserves message order.
            </summary>
            <remarks>
            <para>
            Delegates will be invoked on the threadpool in the order they were posted with
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.
            No two delegates will ever be executed concurrently.
            Note that if the delegate invokes an async method, the delegate formally ends
            when the async method yields for the first time or returns, whichever comes first.
            Once that delegate returns the next delegate can be executed.
            </para>
            <para>
            This <see cref="T:System.Threading.SynchronizationContext" /> is not a fully functional one, and is intended
            only for use with <see cref="T:StreamJsonRpc.JsonRpc" /> to preserve RPC order.
            It should not be set as the <see cref="P:System.Threading.SynchronizationContext.Current" /> <see cref="T:System.Threading.SynchronizationContext" />.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.queue">
            <summary>
            The queue of work to execute.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext" /> class.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.UnhandledException">
            <summary>
            Occurs when posted work throws an unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Throws <see cref="T:System.NotSupportedException" />.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="state">State to pass to the delegate.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.CreateCopy">
            <summary>
            Throws <see cref="T:System.NotSupportedException" />.
            </summary>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Dispose">
            <summary>
            Causes this <see cref="T:System.Threading.SynchronizationContext" /> to reject all future posted work and
            releases the queue processor when it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.ProcessQueueAsync">
            <summary>
            Executes queued work on the threadpool, one at a time.
            </summary>
            <returns>A task that always completes successfully.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> class
            and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker">
            <summary>
            Gets the moniker for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Protocol">
            <summary>
            Gets a non-localized name of the protocol supported by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource" /> to be used on constructed clients or servers.
            </summary>
            <value><see langword="null" /> by default.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.MultiplexingStream">
            <summary>
            Gets the <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used by constructed clients or servers.
            </summary>
            <value><see langword="null" /> by default.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.JoinableTaskFactory">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that may be applied
            to the constructed RPC connection.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ClientInterface">
            <summary>
            Gets the interface type that the client's "callback" RPC target is expected to implement.
            </summary>
            <value>May be null if the service does not invoke methods on the client.</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc``1(System.Object,System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Creates an RPC client proxy over a given <see cref="T:System.IO.Pipelines.IDuplexPipe" />
            and provides a local RPC target for the remote party to invoke methods locally.
            </summary>
            <typeparam name="T">The type of the RPC proxy to generate for invoking methods on the remote party or receiving events from it.</typeparam>
            <param name="rpcTarget">
            A local RPC target on which the remote party can invoke methods.
            This is usually optional for requestors of a service but is typically expected for the proffering services to provide.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <param name="pipe">The pipe used to communicate with the remote party.</param>
            <returns>
            The generated proxy.
            This value should be disposed of when no longer needed, if it implements <see cref="T:System.IDisposable" /> at runtime.
            A convenient disposal syntax is:
            <code><![CDATA[(proxy as IDisposable)?.Dispose();]]></code>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc``1(System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Creates an RPC client proxy over a given <see cref="T:System.IO.Pipelines.IDuplexPipe" />
            without providing a local RPC target for the remote party to invoke methods locally.
            </summary>
            <typeparam name="T">The type of the RPC proxy to generate for invoking methods on the remote party or receiving events from it.</typeparam>
            <param name="pipe">The pipe used to communicate with the remote party.</param>
            <returns>
            The generated proxy.
            This value should be disposed of when no longer needed, if it implements <see cref="T:System.IDisposable" /> at runtime.
            A convenient disposal syntax is:
            <code><![CDATA[(proxy as IDisposable)?.Dispose();]]></code>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc(System.Object,System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Establishes an RPC connection to a given object over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />,
            allowing the remote party to invoke methods locally on the given object.
            </summary>
            <param name="rpcTarget">
            The target of any RPC calls received over the supplied <paramref name="pipe" />.
            Raising events defined on this object may result in notifications being forwarded to the remote party.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <param name="pipe">The pipe the <paramref name="rpcTarget" /> should use to communicate.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructLocalProxy``1(``0)">
            <summary>
            Gives the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> a chance to wrap a local target object
            so that interacting with it behaves similarly to if it were a remote target that was using RPC.
            </summary>
            <typeparam name="T">The interface that defines the RPC contract for communicating with the <paramref name="target" />.</typeparam>
            <param name="target">The local target object. May be null, which will result in null being returned.</param>
            <returns>The proxy wrapper (or null if <paramref name="target" /> is null); or possibly the original <paramref name="target" /> object if this method is not overriden by a derived-type.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithTraceSource(System.Diagnostics.TraceSource)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource" /> property set to the specified value.
            </summary>
            <param name="traceSource">The receiver of trace messages.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithJoinableTaskFactory(Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.JoinableTaskFactory" /> property set to the specified value.
            </summary>
            <param name="joinableTaskFactory">The value for the modified property..</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithServiceMoniker(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> property set to the specified value.
            </summary>
            <param name="moniker">The moniker to be used in place of the original.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.MultiplexingStream" /> property set to the specified value and <see cref="T:Nerdbank.Streams.MultiplexingStream.Options" /> set to <see langword="null" />.
            </summary>
            <param name="multiplexingStream">The <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used by constructed clients or servers.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Establishes an RPC connection over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="pipe">The pipe used to send and receive RPC messages.</param>
            <returns>An object representing the lifetime of the connection.</returns>
            <remarks>
            Callers are expected to call <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient``1" /> and/or <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.AddLocalRpcTarget(System.Object)" /> on the result value
            before invoking <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> to begin the RPC session.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Clone">
            <summary>
            Creates a copy of this instance with all the same properties.
            </summary>
            <returns>The copy.</returns>
            <remarks>
            Derived types should override this method to create a new instance of their own type,
            using the <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor)" /> copy constructor,
            then copy all their unique properties from this instance to the new one before returning the new one.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection">
            <summary>
            Represents an RPC connection.
            </summary>
            <remarks>
            This object should self-dispose when the underlying <see cref="T:System.IO.Pipelines.IDuplexPipe" /> completes.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.TraceSource">
            <summary>
            Gets or sets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.TraceSource" /> that receives log messages regarding the RPC connection.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when the underlying RPC connection has shutdown
            and any local RPC target objects have been disposed of, if applicable.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.AddLocalRpcTarget(System.Object)">
            <summary>
            Adds a target object to receive RPC calls.
            </summary>
            <param name="rpcTarget">
            A target for any RPC calls received over the connection.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient``1">
            <summary>
            Produces a proxy that provides a strongly-typed API for invoking methods offered by the remote party.
            </summary>
            <typeparam name="T">The interface that the returned proxy should implement.</typeparam>
            <returns>The generated proxy.</returns>
            <remarks>
            This method may be called any number of times, but restrictions may apply after <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> is called,
            particularly when <typeparamref name="T" /> includes events.
            </remarks>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient(System.Type)">
            <summary>
            Produces a proxy that provides a strongly-typed API for invoking methods offered by the remote party.
            </summary>
            <param name="interfaceType">The interface that the returned proxy should implement.</param>
            <returns>The generated proxy.</returns>
            <remarks>
            This method may be called any number of times, but restrictions may apply after <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> is called,
            particularly when <paramref name="interfaceType" /> includes events.
            </remarks>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening">
            <summary>
            Begins listening for incoming messages.
            </summary>
            <remarks>
            This isn't automatic since sometimes event listeners must be wired up before messages come in that would raise those events.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.Dispose">
            <summary>
            Disconnects from the RPC pipe, and disposes of managed and native resources held by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient">
            <summary>
            A caching client of the <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.ownsAuthorizationService">
            <summary>
            A value indicating whether <see cref="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizationService" /> should be disposed when this instance is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.cachedAuthChecks">
            <summary>
            The set of auth checks that we have responses for.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.clientCredentials">
            <summary>
            The default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> for all service requests
            that do not explicitly provide it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.#ctor(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> class.
            </summary>
            <param name="authorizationService">The client proxy of the authorization service that this instance will wrap. This will be disposed (if it implements <see cref="T:System.IDisposable" />) when this <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> is disposed.</param>
            <param name="ownsAuthorizationService"><see langword="true" /> to dispose of <paramref name="authorizationService" /> when this instance is disposed; otherwise <see langword="false" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.#ctor(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> class.
            </summary>
            <param name="authorizationService">The client proxy of the authorization service that this instance will wrap. This will be disposed (if it implements <see cref="T:System.IDisposable" />) when this <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> is disposed.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
            <param name="ownsAuthorizationService"><see langword="true" /> to dispose of <paramref name="authorizationService" /> when this instance is disposed; otherwise <see langword="false" />.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizationService">
            <summary>
            Gets the authorization service client proxy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.GetCredentialsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data to include in the <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> property of a service request.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A set of credentials.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when credentials are not available, are expired beyond recovery, or revoked.</exception>
            <remarks>
            If this service was created with credentials in <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            this method will return that same set or perhaps a refreshed set representing the same client.
            If this service was created without credentials, credentials are obtained from the identity running the process hosting this service.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Checks whether a previously authenticated user is authorized to perform some operation.
            </summary>
            <param name="operation">The operation to be performed.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><see langword="true" /> if the client is authorized to perform the <paramref name="operation" />; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizeOrThrowAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Verifies that the previously authenticated user is authorized to perform some operation, or throws an exception.
            </summary>
            <param name="operation">The operation to check authorization for.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes successfully if the operation is authorized, or faults if not.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the client is not authorized to perform the <paramref name="operation" />.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceExtensions.AuthorizeOrThrowAsync(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Verifies that the previously authenticated user is authorized to perform some operation, or throws an exception.
            </summary>
            <param name="authorizationService">The authorization service.</param>
            <param name="operation">The operation to check authorization for.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes successfully if the operation is authorized, or faults if not.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the client is not authorized to perform the <paramref name="operation" />.</exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService">
            <summary>
            An authorization service that always returns false for authorization checks, and does not have access to any credentials.
            </summary>
            <remarks>
            This is the service to be used when a service does not have access to an <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.CredentialsChanged">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.AuthorizationChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService">
            <summary>
            The service contract for the <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.Authorization" /> service.
            </summary>
            <remarks>
            For improved performance, clients may pass an instance of this interface to <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> and use that
            so that queries are locally cached.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CredentialsChanged">
            <summary>
            Occurs when the credentials previously supplied to this service are at or near expiry.
            </summary>
            <remarks>
            Handlers should request a fresh set of credentials with <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)" />
            to keep this service current and to include in future requests for other services.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.AuthorizationChanged">
            <summary>
            Occurs when the client's set of authorized activities has changed.
            Clients that have cached previous authorization responses should invalidate the cache.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data to include in the <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> property of a service request.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A set of credentials.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when credentials are not available, are expired beyond recovery, or revoked.</exception>
            <remarks>
            If this service was created with credentials in <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            this method will return that same set or perhaps a refreshed set representing the same client.
            If this service was created without credentials, credentials are obtained from the identity running the process hosting this service.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Checks whether a previously authenticated user is authorized to perform some operation.
            </summary>
            <param name="operation">The operation to be performed.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><see langword="true" /> if the client is authorized to perform the <paramref name="operation" />; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.IBrokeredServiceManifest">
            <summary>
            Exposes details about availability of services proffered to the client.
            Obtainable from the <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteBrokeredServiceManifest" /> service.
            </summary>
            <remarks>
            The results are based on the caller.
            For example if an instance of this service is obtained by a Live Share guest
            the results from method calls may vary from an instance of this service obtained by a Codespaces client.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IBrokeredServiceManifest.GetAvailableServicesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of services that are available from an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A collection of service monikers.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IBrokeredServiceManifest.GetAvailableVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the collection of versions available for the specified service from an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="serviceName">The <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" /> from the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> for the service to get information about.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A collection of versions available for the named service.
            A null element may be in the collection if the server may consider a service request without regard to the requested version.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation">
            <summary>
            Describes an operation that requires an authorization check.
            </summary>
            <seealso cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
            <param name="operationMoniker">the kind of operation to be performed.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
            <param name="operationMoniker">the kind of operation to be performed.</param>
            <param name="requiredTrustLevel">the trust level required for the operation.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker">
            <summary>
            Gets or sets the kind of operation to be performed.
            </summary>
            <remarks>
            This may be a semi-human readable string, and is NOT intended for machine interpretation.
            Processors of this value should consider it an opaque string.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.RequiredTrustLevel">
            <summary>
            Gets or sets the trust level required for the operation.
            </summary>
            <value>May be null if not applicable (e.g. the <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker" /> of operation is simply allowed or not, without multiple degrees of trust).</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.Equals(Microsoft.ServiceHub.Framework.Services.ProtectedOperation)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.IsSupersetOf(Microsoft.ServiceHub.Framework.Services.ProtectedOperation)">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" />, if granted, implies another <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> should also be considered granted.
            </summary>
            <param name="other">The other operation, which may be a subset of this one.</param>
            <returns><see langword="true" /> if this instance is a superset of the other; <see langword="false" /> otherwise.</returns>
            <remarks>
            In the base implementation, a superset is considered true if the <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker" /> is equal and <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.RequiredTrustLevel" /> is equal or a greater value.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.SHostServiceBrokerFactory">
            <summary>
            Service identifier for <see cref="T:Microsoft.VisualStudio.Threading.AsyncLazy`1" /> instance that is owned by the service hub host and
            returned from <see cref="T:System.IServiceProvider" /> collection.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks">
            <summary>
            Gives a dynamic assembly the ability to skip CLR visibility checks,
            allowing the assembly to access private members of another assembly.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeBaseClassCtor">
            <summary>
            The <see cref="M:System.Attribute.#ctor" /> constructor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeUsageCtor">
            <summary>
            The <see cref="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" /> constructor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeUsageAllowMultipleProperty">
            <summary>
            The <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder">
            <summary>
            The assembly builder that is constructing the dynamic assembly.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.moduleBuilder">
            <summary>
            The module builder for the default module of the <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder" />.
            This is where the special attribute will be defined.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.attributedAssemblyNames">
            <summary>
            The set of assemblies that already have visibility checks skipped for.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.magicAttributeCtor">
            <summary>
            The constructor on the special attribute to reference for each skipped assembly.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.#ctor(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks" /> class.
            </summary>
            <param name="assemblyBuilder">The builder for the dynamic assembly.</param>
            <param name="moduleBuilder">The builder for the default module defined by <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.GetSkipVisibilityChecksRequirements(System.Reflection.TypeInfo)">
            <summary>
            Gets the set of assemblies that a generated assembly must be granted the ability to skip visiblity checks for
            in order to access the specified type.
            </summary>
            <param name="typeInfo">The type which may be internal.</param>
            <returns>The set of names of assemblies to skip visibility checks for.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
            <summary>
            Add attributes to a dynamic assembly so that the CLR will skip visibility checks
            for the assemblies with the specified names.
            </summary>
            <param name="assemblyNames">The names of the assemblies to skip visibility checks for.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Reflection.AssemblyName)">
            <summary>
            Add an attribute to a dynamic assembly so that the CLR will skip visibility checks
            for the assembly with the specified name.
            </summary>
            <param name="assemblyName">The name of the assembly to skip visibility checks for.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.GetMagicAttributeCtor">
            <summary>
            Gets the constructor to the IgnoresAccessChecksToAttribute, generating the attribute if necessary.
            </summary>
            <returns>The constructor to the IgnoresAccessChecksToAttribute.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.EmitMagicAttribute">
            <summary>
            Defines the special IgnoresAccessChecksToAttribute type in the <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.moduleBuilder" />.
            </summary>
            <returns>The generated attribute type.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ClientProxyTypeArgumentMustBeAnInterface">
            <summary>
              Looks up a localized string similar to "{0}" is not an interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.CouldNotGetProcessId">
            <summary>
              Looks up a localized string similar to Failed to get the process id of the client..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.Error_InvalidExternalClientProcessPid">
            <summary>
              Looks up a localized string similar to {0} '{1}' was not provided in the service request or it did not contain a valid PID..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.FailedToValidateClient">
            <summary>
              Looks up a localized string similar to Failed to validate the client connecting..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.FormatterNotSupported">
            <summary>
              Looks up a localized string similar to The formatter "{0}" is not supported for the protocol "{1}"..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.MessageDelimiterNotSupported">
            <summary>
              Looks up a localized string similar to The message delimiter scheme "{0}" is not supported for the protocol "{1}"..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.NamedPipeClientCouldNotBeValidated">
            <summary>
              Looks up a localized string similar to Named pipe client could not be validated..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.NotInitialized">
            <summary>
              Looks up a localized string similar to This instance has not been initialized..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.PipeNotOwnedByCurrentUser">
            <summary>
              Looks up a localized string similar to This pipe is not owned by the current user..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ProtocolNotSupported">
            <summary>
              Looks up a localized string similar to The protocol "{0}" is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ServiceActivationFailed">
            <summary>
              Looks up a localized string similar to Activating the "{0}" service failed..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ServiceMoniker_AlreadyProffered">
            <summary>
              Looks up a localized string similar to The service "{0}" has already been proffered. Dispose the result of the last proffered factory before proffering another one..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.TooManyServices">
            <summary>
              Looks up a localized string similar to More than one service found for "{0}" but at most one was allowed..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory">
            <summary>
            A delegate that creates new instances of a service to be exposed by an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="moniker">The identifier for the service that is requested.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="serviceBroker">The service broker that the service returned from this delegate should use to obtain any of its own dependencies.</param>
            <param name="cancellationToken">A token to indicate that the caller has lost interest in the result.</param>
            <returns>A unique instance of the service. If the value implements <see cref="T:System.IDisposable" />, the value will be disposed when the client disconnects.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory">
            <summary>
            A delegate that creates new instances of a service to be exposed by an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="moniker">The identifier for the service that is requested.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="serviceBroker">The service broker that the service returned from this delegate should use to obtain any of its own dependencies.</param>
            <param name="authorizationServiceClient">
            The authorization service for this brokered service to use.
            Must be disposed of by the service or the service factory, unless the service factory itself throws an exception.
            </param>
            <param name="cancellationToken">A token to indicate that the caller has lost interest in the result.</param>
            <returns>A unique instance of the service. If the value implements <see cref="T:System.IDisposable" />, the value will be disposed when the client disconnects.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy">
            <summary>
            Policies that may apply to how to treat credentials.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy.RequestOverridesDefault">
            <summary>
            If the service request carries client credentials with it, use that instead of what this filter would apply.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy.FilterOverridesRequest">
            <summary>
            Always replace the client credentials on a request with the set specified on this filter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute">
            <summary>
            Exports a class as a brokered service.
            </summary>
            <remarks>
            <para>The class that this attribute is applied to must implement <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService" />.</para>
            <para>Any other MEF attributes used by the class with this attribute applied should come from the System.ComponentModel.Composition namespace.</para>
            <para>This attribute may be applied multiple times if multiple versions of the brokered service are supported.</para>
            <para>
            Exported brokered services may import any other MEF export from the default scope, along with the following types (with no explicit contract name):
            <list type="bullet">
            <item><see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /></item>
            </list>
            </para>
            <para>Brokered services may not import other brokered service. They must use <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to acquire them.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" /> class.
            </summary>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
            <param name="version">The version of the proffered service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />). May be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceName">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" /> of the exported brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceVersion">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" /> of the exported brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience">
            <summary>
            Gets or sets a value indicating which clients should be allowed to directly acquire this service.
            Audiences may be bitwise-OR'd together to expand the set of clients that are allowed to acquire this service.
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Process" />.</value>
            <remarks>
            This is an architectural control and not a security boundary, since untrusted parties may acquire a service
            that you *do* allow to acquire this service, thus giving indirect access to this service to the untrusted client.
            Use <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" /> (usually via the caching
            <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> wrapper) to perform security checks within
            your publicly exposed methods to ensure the ultimate client is authorized to perform any operation.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when an attempt is made to set this value to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None" />.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.AllowTransitiveGuestClients">
             <summary>
             Gets or sets a value indicating whether guest clients are allowed to transitively acquire this service.
             By default (<see langword="false" />), only owners are allowed to access a brokered service. To opt-in to allowing
             guests to acquire the proffered service, set this to <see langword="true" />. By setting this to <see langword="true" /> the service
             now has sole responsibility in correctly using <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />
             to authorize sensitive operations.
             </summary>
             <remarks>
             <para>Whereas <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" /> is an architectural control, this property defines the security boundary.</para>
            
             <para> Transitive Access Example: Service A performs sensitive operations. It is proffered with <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveClient" />
             so that it can only be *directly* acquired by owners. However, this is not sufficient to prevent unauthorized access.
             If Service B is proffered with <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.AllClientsIncludingGuests" />,
             it can be *directly* acquired by guests. When Service B internally acquires an instance of Service A, this means that guests now have
             *indirect* access to the sensitive operations in Service A. If Service A has not implemented authorization to guard sensitive operations,
             this indirect access violates the security boundary.</para>
            
             <para>In order to prevent untrusted parties transitively aquiring a service that should require authorization,
             by default all brokered services are only accessible to owners. This is regardless of the value of <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" />.
             In the example above, if Service B has been aquired by a guest, the attempt to acquire Service A will fail.</para>
            
             <para>When a service has implemented authorization to guard sensitive operations, it can opt-in to allowing
             guest acquisition by setting this property to <see langword="true" />.</para>
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata">
            <summary>
            Describes the metadata expected from the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" />.
            </summary>
            <devremarks>
            This should stay in sync with the metadata added by that attribute.
            Each metadata is declared as an array because that attribute has <see cref="P:System.AttributeUsageAttribute.AllowMultiple" />
            set to <see langword="true" />.
            </devremarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.ServiceName">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceName" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.ServiceVersion">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceVersion" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.Audience">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.AllowTransitiveGuestClients">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.AllowTransitiveGuestClients" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer">
            <summary>
            Provides a means to proffer services into <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> and access to the global <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <summary>
            Proffers a service for publication via an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> associated with this container.
            </summary>
            <param name="serviceDescriptor">
            The descriptor for the service.
            The <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" /> is used to match service requests to the <paramref name="factory" />.
            The <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)" /> method is used to convert the service returned by the <paramref name="factory" /> to a pipe when the client prefers that.
            </param>
            <param name="factory">The delegate that will create new instances of the service for each client.</param>
            <returns>A value that can be disposed to remove the proffered service from availability.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="serviceDescriptor" /> represents a <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> that has already been proffered.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if no registration can be found for the proffered <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" />.
            </exception>
            <remarks>
            The service identified by the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" /> must have been pre-registered
            with a <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience" /> indicating who should have access to it and whether it might be obtained from a remote machine or user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.GetFullAccessServiceBroker">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> with full access to all services available to this process with local credentials applied by default for all service requests.
            This should *not* be used within a brokered service, which should instead use the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that is given to its service factory.
            </summary>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance created for the caller.</returns>
            <remarks>
            <para>
            When a service request is made with an empty set of <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            local (full) permissions are applied.
            A service request that includes its own client credentials may effectively "reduce" permission levels for the requested service
            if the service contains authorization checks. It will not remove a service from availability entirely since the service audience
            is always to allow all services to be obtained.
            </para>
            <para>
            Callers should use the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> they are provided via their <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> instead of using
            this method to get an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> so that they are secure by default.
            An exception to this rule is when a service exposed to untrusted users has fully vetted the input for a specific incoming RPC call
            and wishes to request other services with full trust in order to accomplish something the user would otherwise not have permission to do.
            This should be done with great care.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerDiagnostics">
            <summary>
            Allows for retrieval or export of manifest, registration and runtime data that can be useful in diagnosing a service acquisition failure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerDiagnostics.ExportDiagnosticsAsync(System.String,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Writes a bunch of diagnostic data to a JSON file.
            </summary>
            <param name="filePath">The path to the JSON file to be written. If it already exists it will be overwritten.</param>
            <param name="serviceAudience">The audience to consider is querying for services.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes when the writing is done.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal">
            <summary>
            An internal-interface that provides access to more of what <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer" /> offers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal.LocalUserCredentials">
            <summary>
            Gets credentials to use to impersonate the local user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <summary>
            Gets a service broker that targets an out of proc and/or less trusted consumer.
            </summary>
            <param name="audience">The architectural position of the consumer.</param>
            <param name="clientCredentials">The client credentials to associate with this consumer, if less trusted.</param>
            <param name="credentialPolicy">How to apply client credentials to individual service requests.</param>
            <returns>The custom <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService">
            <summary>
            An interface that must be implemented by a brokered service that is exported to MEF
            via the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService.Descriptor">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> to be used when activating the service.
            </summary>
            <remarks>
            When a brokered service supports multiple versions in their <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" />,
            it may be important to consider the version being activated to know which <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> to return
            from this property.
            This <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> may be imported via MEF in the same MEF part that implements this interface
            in order to check the value before returning from this property getter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the brokered service before returning the new instance to its client.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes with initialization.</returns>
            <remarks>
            <para>This method offers the brokered service an <em>optional</em> opportunity to do async initialization,
            similar to what <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> would have allowed for when proffering a non-MEF
            brokered service with <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />.
            Empty methods may simply return <see cref="P:System.Threading.Tasks.Task.CompletedTask" />.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience">
            <summary>
            Identifies various audiences that may want or need to access a service.
            When used to register a service (e.g. ProvideBrokeredServiceAttribute)
            it determines whether that service can be accessed locally, remotely and/or by 3rd parties.
            </summary>
            <remarks>
            This enum may also be used as a filter when constructing an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            where each flag reduces the set of services available as only services that specify every flag
            in the filter are available.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None">
            <summary>
            No flags. The service is not available to anyone.
            When used for a filtered view, it means apply no filters (all services are available).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Process">
            <summary>
            Services are available for clients running in the same process (or <see cref="T:System.AppDomain" /> on the .NET Framework).
            They will not be available from other processes (e.g. ServiceHub services).
            A brokered service that includes this flag may still be *indirectly* exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" />
            by way of another brokered service that is exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" /> that is proffered from this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Local">
            <summary>
            The service is available for clients that support this process (e.g. ServiceHub services). These always run on the same machine and user account.
            It does *not* include processes connected over Live Share or a Visual Studio Online Environment connection, even if these processes are running on the same machine.
            A brokered service that includes this flag may still be *indirectly* exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" />
            by way of another brokered service that is exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" /> that is proffered from this machine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveClient">
            <summary>
            When the service is running on an Visual Studio Online environment it is available to the client.
            </summary>
            <remarks>
            Host services are available for the *one* client running on any machine that is connected remotely using the exclusive
            owner connection (not the traditional Live Share sharing session).
            Such a connection is *always* owned by the same owner as the server and thus is considered trusted.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest">
            <summary>
            When the service is running on a Live Share host it is available for Live Share guests,
            which may or may not be using the same user account as the host.
            </summary>
            <remarks>
            Host services are available for remote Live Share clients running under *any* user account.
            Any necessary authorization checks are the responsibility of the service.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveServer">
            <summary>
            When the service is running on a client of an Visual Studio Online environment, it is available to the server.
            </summary>
            <remarks>
            Client services are proffered to a server over an exclusive connection that is always operated by the owner at both ends
            (and is not the traditional Live Share sharing session).
            A server never has more than one of these connections concurrently.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.AllClientsIncludingGuests">
            <summary>
            The service is available for local processes as well as clients of Visual Studio Online environments and all Live Share guests (including untrusted strangers).
            </summary>
            <remarks>
            Host services are available for all clients (owner or guest), whether they are local, remote over Live Share or remote over an exclusive connection.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.PublicSdk">
            <summary>
            The service is considered part of the public SDK,
            and thus is available to 3rd party clients that are only privileged to access public SDK services.
            This flag should only be specified for public services that have stable APIs.
            This flag must be combined with other flags to indicate which local and/or remote clients are allowed to request this service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices">
            <summary>
            Provides an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> implementation for brokered services proffered via MEF
            and serves as the factory for these services.
            </summary>
            <remarks>
            This factory only creates <em>one</em> brokered service.
            As this object serves as the entry into a MEF sharing boundary, that means only one brokered service gets an instance of this class.
            This is as desired, since each consumer of an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> should ideally have its own copy.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.InnerServiceBroker">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that this instance forwards all calls to.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            This should be set to an object that is scoped for the particular activated brokered service the same way the object passed to
            <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> would be.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ServiceActivationOptions">
            <summary>
            Gets or sets the <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ServiceActivationOptions" /> for the particular brokered service this object in created to serve.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ActivatedMoniker">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> for the particular brokered service this object in created to serve.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.AuthorizationServiceClient">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> to be exported for optional use by the brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ExportedServiceMetadata">
            <summary>
            Gets an enumerable of the metadata exported from all MEF-based brokered services.
            </summary>
            <remarks>
            This is used for brokered service registration and proffering by the <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Initialize" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.Helper">
            <summary>
            Gets or sets a helper class that contains MefV1 imports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.CreateBrokeredServiceAsync(System.Threading.CancellationToken)">
            <summary>
            Activates the one brokered service indicated by the <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ActivatedMoniker" /> property.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The activated service.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.MefV1Helper">
            <summary>
            A class with MEFv1 attributes to force brokered service NonShared construction.
            </summary>
            <remarks>
            Our parent class must use MEFv2 attributes because only they can express sharing boundaries with <see cref="T:System.Composition.SharedAttribute" />.
            But only MEFv1 attributes allow setting <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy" />
            as required to activate a new brokered service for each client.
            We bridge this feature gap between the two sets of attributes via this helper class, so that the outer class can use MEFv2
            and the nested class can use MEFv1, thereby making both sets of features available as required.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.MefV1Helper.ExportedBrokeredServices">
            <summary>
            Gets or sets the collection of all brokered services, from which only one is ever activated (for a given instance of this class).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices">
            <summary>
            Implements the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to be proffered into the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" />
            in order to effectively proffer all the MEF-activated brokered services in the IDE.
            </summary>
            <remarks>
            A host IDE should derive from this class and apply <see cref="T:System.Composition.ExportAttribute" /> to the derived type.
            At startup, the IDE should acquire this export and call <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.RegisterAndProfferServicesAsync(System.Threading.CancellationToken)" />
            to add MEF exported brokered services to the container.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.serviceRegistration">
            <summary>
            The registration data for all MEF brokered services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.serviceMonikers">
            <summary>
            The monikers to all MEF brokered services.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Microsoft#ServiceHub#Framework#IServiceBroker#AvailabilityChanged">
            <summary>
            We never raise this event, so just drop the handlers on the floor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.ServiceBrokerFactory">
            <summary>
            Gets or sets the sharing boundary factory used to activate each MEF brokered service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.RegisterAndProfferServicesAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.RegisterAndProfferServices(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.RegisterAndProfferServices(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer)">
            <summary>
            Registers MEF exported brokered services and proffers a factory for them.
            </summary>
            <param name="container">The container to register and proffer the services with.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.GetBrokeredServiceContainerAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global brokered service container.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The global brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.ActivateBrokeredServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of a MEF sharing boundary within which a brokered service with the specified moniker will be activated.
            </summary>
            <param name="serviceMoniker">The moniker of the required service.</param>
            <param name="contextualServiceBroker">The service broker that is created specifically for this brokered service.</param>
            <param name="serviceActivationOptions">The activation options to use with this service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The MEF export representing this sharing boundary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Initialize">
            <summary>
            Initializes internal data structures after MEF has set importing properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer">
            <summary>
            The service ID for the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer">brokered service container</see>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsFullAccessServiceBroker">
            <summary>
            A type to serve as the MEF contract name for importing an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that is equivalent
            to what would have come from a call to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.GetFullAccessServiceBroker" /> on
            the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer" />.
            </summary>
            <remarks>
            This can be imported in a MEF part like this:
            <code><![CDATA[
            [Import(typeof(SVsFullAccessServiceBroker))]
            private IServiceBroker serviceBroker;
            ]]></code>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.WellKnownProtectedOperations.ClientIsOwner">
            <summary>
            The moniker used to represent a check for whether the client is owned by the same user account that owns the host
            and therefore merits full owner trust permissions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.WellKnownProtectedOperations.CreateClientIsOwner">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that represents a <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.WellKnownProtectedOperations.ClientIsOwner" /> operation.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that may be passed to <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer">
            <summary>
            A container of brokered services that supports multiple service sources and multiple consumer roles that get filtered <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> views into the available services.
            </summary>
            <remarks>
            <para>When a service is registered without a version, it doubles as a fallback service when a request for that service name is made but no exact version match can be found.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest">
            <summary>
            Exposes details about availability of locally proffered services for clients with a specific audience.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest.#ctor(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest" /> class.
            </summary>
            <param name="container">The container that owns this instance.</param>
            <param name="serviceAudience">The <see cref="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.Audience" /> from the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> for which this service was created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest.GetAvailableServicesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest.GetAvailableVersionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.AllowAll">
            <summary>
            No services will be artificially denied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.DenyAll">
            <summary>
            All service requests will be denied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.DenyRemote">
            <summary>
            All requests will be denied if they would be fulfilled by a remote connection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ApplyChaosMonkeyConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads and applies the content of a chaos monkey configuration.
            </summary>
            <param name="chaosMonkeyConfigurationPath">The path to a chaos monkey configuration file.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosMonkey">
            <summary>
            The data object to deserialize from a chaos monkey configuration file.
            </summary>
            <remarks>
            See the ChaosMonkey.schema.json file for the full schema.
            Sample JSON:
            <code><![CDATA[
            {
              "brokeredServices": {
                "monikerName/1.2": {
                  "availability": "localOnly"
                }
              }
            }
            ]]></code>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.PreferredSourceOrderForRemoteServices">
            <summary>
            Defines the order of sources to check for remote services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.PreferredSourceOrderForLocalServices">
            <summary>
            Defines the order of sources to check for locally proffered services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.registeredServices">
            <summary>
            A dictionary of registered services, keyed by their monikers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.isClientOfExclusiveServer">
            <summary>
            A value indicating whether this process is dedicated as a client of a Codespace.
            </summary>
            <remarks>
            If we're running in a Codespace client, block all local services that may be obtained from the Codespace server.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.profferedServiceIndex">
            <summary>
            A dictionary for looking up a proffered service by a source and moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.remoteSources">
            <summary>
            The remote sources from which we can expect services and the proffering sources for them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.#ctor(System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration},System.Boolean,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" /> class.
            </summary>
            <param name="services">
            A map of service monikers to their registration details.
            Only registered services will be obtainable from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> returned from methods on this class.
            </param>
            <param name="isClientOfExclusiveServer"><see langword="true" /> when this process is or will be connected to a dedicated, trusted server (e.g. a Codespace) that will provide the environment to this client; <see langword="false" /> otherwise.</param>
            <param name="joinableTaskFactory">An optional <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> to use when scheduling async work, to avoid deadlocks in an application with a main thread.</param>
            <param name="traceSource">A means of logging.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnostics">
            <summary>
            Gets a descriptor for the service that can diagnose the cause of a missing brokered service.
            Use <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService" /> to interact with this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.LocalUserCredentials">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RegisteredServices">
            <summary>
            Gets the services currently registered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.IServiceBroker,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> into this container.
            </summary>
            <param name="serviceBroker">A service broker offering local services.</param>
            <param name="serviceMonikers">The monikers to services that should be obtained from this <paramref name="serviceBroker" />.</param>
            <returns>A value that can be disposed to remove this <paramref name="serviceBroker" /> from the container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> for access by this container.
            </summary>
            <param name="serviceBroker">The service broker for remote services.</param>
            <param name="source">Where the remote services that are being proffered come from.</param>
            <param name="serviceMonikers">
            The set of service monikers that may be requested of this service broker. May be null for truly remote brokers that we don't know the full set of services for.
            Only services registered with this container will ever be requested from this <paramref name="serviceBroker" />.
            </param>
            <returns>A value that can be disposed to remove this <paramref name="serviceBroker" /> from the container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for access by this container.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for access by this container.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" />
            <param name="serviceBroker"><inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" path="/param[@name='serviceBroker]" /></param>
            <param name="multiplexingStream">An optional <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used to provision pipes for each brokered service.</param>
            <param name="source"><inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" path="/param[@name='source]" /></param>
            <param name="serviceMonikers"><inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" path="/param[@name='serviceMonikers]" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetFullAccessServiceBroker">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessRemoteServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)" />
            <returns>A <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for use in sharing directly on a remote connection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ExportDiagnosticsAsync(System.String,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Writes a bunch of diagnostic data to a JSON file.
            </summary>
            <param name="filePath">The path to the JSON file to be written. If it already exists it will be overwritten.</param>
            <param name="serviceAudience">The audience.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes when the writing is done.</returns>
            <remarks>
            Rough schema of JSON file:
            <code><![CDATA[
             {
               "perspectiveAudience": "Process",
               "activeRemoteSources" : [ "TrustedServer" ],
               "brokeredServices": [
                 {
                   name: "Calculator",
                   version: "1.0",
                   audience: "Local, Process, Guest",
                   allowGuestClients: false,
                   profferingPackage: "{28074D43-B498-47FE-97CF-4A182DA71C59}"
                   profferedLocally: true,
                   activeSource: "TrustedServer",
                   includedByRemoteSourceManifest: true
                 },
                 {
                   // ...
                 },
                 // ...
               ]
             }
            ]]></code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetServicesThatMayBeExpected(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource)">
            <summary>
            Returns the services that are registered locally that *may* be proffered by a particular remote source.
            </summary>
            <param name="remoteSource">The source of services.</param>
            <returns>A sequence of registered services that we may expect from the source.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetSecureServiceBroker(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Gets a service broker that may be provided to a <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" />
            in order to automatically propagate <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> from one service to its dependencies.
            </summary>
            <param name="options">The options passed to the originally requested service.</param>
            <returns>The filtering, authorizing service broker.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForBrokeredServiceAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)" />
            <devremarks>
            This method was created because <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)" />
            needed to be exposed publicly but as a protected virtual method, making it public would be a binary breaking change.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ApplyDescriptorSettingsInternalAsync(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Applies typical transformations on a descriptor fro brokered service clients and services.
            </summary>
            <param name="descriptor">The stock descriptor used for this service.</param>
            <param name="serviceBroker">A service broker that may be used to acquire other, related services as necessary to mutate the <paramref name="descriptor" />.</param>
            <param name="serviceActivationOptions">The activation options for the service.</param>
            <param name="clientRole">A value indicating whether the <paramref name="descriptor" /> is about to be used to activate a client proxy or client connection; use <see langword="false" /> when activating the service itself.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The modified descriptor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RegisterServices(System.Collections.Generic.IReadOnlyDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration})">
            <summary>
            Registers a set of services with the global broker. This is separate from proffering a service. A service should be registered before it is proffered.
            An <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event is never
            fired as a result of calling this method, but instead will be fired once the service is proffered.
            </summary>
            <param name="services">The set of services to be registered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ApplyDescriptorSettings(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Boolean)">
            <summary>
            Applies typical transformations on a descriptor for brokered service clients and services.
            </summary>
            <param name="descriptor">The stock descriptor used for this service.</param>
            <param name="clientRole">A value indicating whether the <paramref name="descriptor" /> is about to be used to activate a client proxy or client connection; use <see langword="false" /> when activating the service itself.</param>
            <returns>The modified descriptor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferIntrinsicService(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferIntrinsicService(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ViewIntrinsicBrokeredServiceFactory)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferIntrinsicService(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ViewIntrinsicBrokeredServiceFactory)">
            <summary>
            Proffers a very special brokered service that is intrinsic to each <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" />.
            </summary>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> of the service.</param>
            <param name="newRegistration">The <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration" /> representing the service being registered.</param>
            <param name="factory">The factory that generates the new service.</param>
            <returns>An <see cref="T:System.IDisposable" /> that will remove the service when disposed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.UnregisterServices(System.Collections.Generic.IEnumerable{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Unregisters a set of services with the global broker. This is separate from unproffering a service. A service should be unregistered before it is unproffered.
            An <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event is never
            fired as a result of calling this method, but instead will be fired once the service is unproffered. To unproffer a service, simply dispose of it's proffering source.
            </summary>
            <param name="services">The set of services to be unregistered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Diagnostics.TraceSource" /> to apply to some brokered service.
            </summary>
            <param name="serviceBroker">A service broker that may be used to create the <see cref="T:System.Diagnostics.TraceSource" />.</param>
            <param name="serviceMoniker">The moniker of the service being requested.</param>
            <param name="options">The activation options accompanying the request.</param>
            <param name="clientRole"><see langword="true" /> if the <see cref="T:System.Diagnostics.TraceSource" /> will be used by the client of the service; <see langword="false" /> if used by the service itself.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Diagnostics.TraceSource" /> instance that has the appropriate verbosity and listeners preconfigured, or <see langword="null" /> if the host provides no instance.</returns>
            <remarks>
            This method should be called by <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> implementations when requesting or activating services.
            The result of this method should be passed to <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithTraceSource(System.Diagnostics.TraceSource)" /> before constructing the RPC connection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered)">
            <summary>
            Indexes a proffered service factory or broker for fast lookup.
            </summary>
            <param name="proffered">The proffering wrapper.</param>
            <returns>A value that may be disposed to cancel the proffer and remove its services from the index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.OnRequestHandled(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestType,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered)">
            <summary>
            When overridden by a derived class, provides a hook to raise events, post telemetry, or log how each brokered service request was handled.
            </summary>
            <param name="moniker">The moniker for the requested service.</param>
            <param name="descriptor">The descriptor associated with the request, if available.</param>
            <param name="type">The nature of the brokered service request.</param>
            <param name="result">An indicator as to how the brokered service request was handled.</param>
            <param name="proffered">The proffering source that was used when activating the service.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IsLocalConsumer(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Gets a value indicating whether a given service audience represents a local consumer (vs. a remote one).
            </summary>
            <param name="filter">The filter in effect on the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</param>
            <returns><see langword="true" /> if the filter represents a local consumer; <see langword="false" /> if a remote one.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetDiagnosticsAsync(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Gets a JSON object that describes the current state of the container, including all registered services, proffer services, brokers, connections, etc.
            </summary>
            <param name="serviceAudience">Specifies what perspective of the container should be used for data that indicates whether a service is available.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A JSON object.</returns>
            <remarks>
            The contents of this JSON blob are meant for human diagnostic purposes and are subject to change.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetAllowedMonikers(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Filters the registered service monikers to those that should be visible to our process from a given <paramref name="source" />,
            then optionally intersects that set with another set.
            </summary>
            <param name="source">The source of services that we should filter our registered list of services to.</param>
            <param name="serviceMonikers">The set of monikers to optionally intersect the filtered registered services with.</param>
            <returns>The filtered, intersected set of monikers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RemoveRegistrations(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered)">
            <summary>
            Removes proffered services from the index.
            </summary>
            <param name="proffered">The proffered element to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.OnAvailabilityChanged(System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered,System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Instructs each applicable <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> to raise its <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="oldIndex">The index of available services before the change. Null if no proffered index was changed, but an underlying service broker says a change was made.</param>
            <param name="proffered">The service proffering entity that has changed the set of services available to us.</param>
            <param name="impactedServices">A subset of services that are impacted by the change. If null, all services associated with the proffering party are impacted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryGetProfferingSource(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered@,Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode@)">
            <summary>
            Gets the proffering broker for a given service, taking both remote and local services into account.
            </summary>
            <param name="serviceMoniker">The sought service.</param>
            <param name="consumingAudience">The audience filter that applies to the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that has received the request.</param>
            <param name="proffered">Receives the proffering wrapper if the service was found and exposed to the <paramref name="consumingAudience" />.</param>
            <param name="errorCode">Receives the error code that describes why we failed to get a proffering source for the service, if applicable.</param>
            <returns><see langword="true" /> if the service broker wrapper was found; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryGetProfferingSource(System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered@,Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode@)">
            <summary>
            Gets the proffering broker for a given service, taking both remote and local services into account.
            </summary>
            <param name="profferedServiceIndex">The index to search for the proffering party.</param>
            <param name="serviceMoniker">The sought service.</param>
            <param name="consumingAudience">The audience filter that applies to the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that has received the request.</param>
            <param name="proffered">Receives the proffering wrapper if the service was found and exposed to the <paramref name="consumingAudience" />.</param>
            <param name="errorCode">Receives the error code that describes why we failed to get a proffering source for the service, if applicable.</param>
            <returns><see langword="true" /> if the service broker wrapper was found; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IsLocalProfferedServiceBlockedOnExclusiveClient(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Checks whether the given service should be denied from a local source on the basis that it should always come from a Codespace Server.
            </summary>
            <param name="serviceRegistration">The service that might be denied.</param>
            <param name="consumingAudience">The consuming audience.</param>
            <returns><see langword="true" /> if the locally proffered service should *not* be activated; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryLookupServiceRegistration(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration@,Microsoft.ServiceHub.Framework.ServiceMoniker@)">
            <summary>
            Checks the in-memory index of registered services for the registration of a named service.
            </summary>
            <param name="serviceMoniker">The moniker for the service. If this includes a version, and no registration for that version exists, a registration without a version may be matched.</param>
            <param name="serviceRegistration">The discovered service registration, if any.</param>
            <param name="matchingServiceMoniker">The <paramref name="serviceMoniker" /> if a match was found, or a copy with the version removed if only a version-less service was registered, or <see langword="null" />.</param>
            <returns><see langword="true" /> if registration was found for the given <paramref name="serviceMoniker" />; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered">
            <summary>
            An object that tracks a proffered service or set of services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered.Source">
            <summary>
            Gets an identifier for where the services are proffered from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered.Monikers">
            <summary>
            Gets the set of monikers for the proffered services.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnosticsService">
            <summary>
            A view-intrinsic brokered service that can analyze why that particular <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> is incapable of producing some requested service.
            This service is accessible via <see cref="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnostics" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker">
            <summary>
            Services a brokered service that is proffered via a <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Monikers">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Source">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker">
            <summary>
            Services brokered services that are proffered via an in-proc <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Monikers">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Source">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory">
            <summary>
            Services a brokered service that is proffered via an in-proc factory.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.AvailabilityChanged">
            <summary>
            We never raise this event, so just drop the handlers on the floor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Source">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Monikers">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Descriptor">
            <summary>
            Gets the descriptor that was provided with the factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Factory">
            <summary>
            Gets the factory, if one was provided that did not take an <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.AuthorizingFactory">
            <summary>
            Gets the factory, if one was provided that takes an <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Container">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.DebuggerDisplay">
            <summary>
            Gets a reasonable value to used for the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> on this or a derived type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ViewIntrinsicBrokeredServiceFactory">
            <summary>
            A delegate that creates new instances of a service to be exposed by an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="view">The view that this service is being activated within.</param>
            <param name="moniker">The identifier for the service that is requested.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="serviceBroker">The service broker that the service returned from this delegate should use to obtain any of its own dependencies.</param>
            <param name="cancellationToken">A token to indicate that the caller has lost interest in the result.</param>
            <returns>A unique instance of the service. If the value implements <see cref="T:System.IDisposable" />, the value will be disposed when the client disconnects.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
            <remarks>
            This delegate is modeled after <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory" /> but adds the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> parameter.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService">
            <summary>
            Services a brokered service that is proffered via an in-proc factory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetPipeAsync(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)" />
            <param name="view">The view used to request this service.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetProxyAsync``1(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedViewIntrinsicService.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)" />
            <param name="view">The view used to request this service.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult">
            <summary>
            Enumerates the possible handling result of a brokered service request.
            </summary>
            <devremarks>
            Although these enum values are each set to unique bits, it isn't a flags enum.
            They are unique bits to allow convenient packing as we internally track which result types we've already posted telemetry events for.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult.Fulfilled">
            <summary>
            The requested brokered service was activated, fulfilling the request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult.Declined">
            <summary>
            The request was declined for reasons other than the service not being found.
            This could be because authorization was denied, or the service factory returned <see langword="null" /> or threw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult.DeclinedNotFound">
            <summary>
            The request was declined because the service was not registered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestType">
            <summary>
            Enumerates the types of brokered service requests that can be made.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestType.Proxy">
            <summary>
            The request was for a proxy to a brokered service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestType.Pipe">
            <summary>
            The request was for a pipe to a brokered service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents">
            <summary>
            The IDs used for events logged via <see cref="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents.Registered">
            <summary>
            Indicates brokered services have been registered.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents.Proffered">
            <summary>
            Indicates brokered services have been proffered.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents.Request">
            <summary>
            Indicates a brokered service has been requested.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents.LoadPackage">
            <summary>
            Indicates that the container is activating a host of a brokered service so that it may proffer a registered brokered service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TraceEvents.EventHandlerFaulted">
            <summary>
            Indicates that a handler of some brokered service event threw an unhandled exception.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View">
            <summary>
            A filtered view on the services proffered to a <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" />, exposed as an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.container">
            <summary>
            The owner of this view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.observedServices">
            <summary>
            The set of services that have been queried for (whether or not they were found)
            since the last time the <see cref="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.AvailabilityChanged" /> event has been raised regarding them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.#ctor(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> class.
            </summary>
            <param name="container">The parent container.</param>
            <param name="audience">
            The audience for this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Each flag specified applies an additional filter (i.e. fewer exposed services).
            Use <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None" /> to make *all* services available (to be used for local consumption only).
            </param>
            <param name="clientCredentials">The client credentials to apply to incoming requests.</param>
            <param name="clientCredentialsPolicy">Specifies which client credentials prevails when the service request contains non-empty credentials.</param>
            <param name="clientCulture">The value to apply to service requests when <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture" /> is <see langword="null" />.</param>
            <param name="clientUICulture">The value to apply to service requests when <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture" /> is <see langword="null" />.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.Audience">
            <summary>
            Gets the filter to apply to services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.SyncObject">
            <summary>
            Gets an object that this class can lock on to synchronize field access.
            </summary>
            <remarks>
            We return a private field because that's good enough, and it avoids an extra allocation of a dedicated sync object.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.OnAvailabilityChanged(System.Object,System.ValueTuple{System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker}})">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">Unused.</param>
            <param name="args">The arguments for the event. The set of impacted services must be a hash-based collection so we can use Intersect on it.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService">
            <summary>
            Provides diagnostics to understand why brokered services are not activatable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Analyzes possible explanations for why a brokered service could not be acquired.
            </summary>
            <param name="missingServiceMoniker">The moniker of the missing brokered service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An analysis describing the first problem encountered while looking for the brokered service.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode">
            <summary>
            Defines the several reasons a brokered service might not be obtained.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.NoExplanation">
            <summary>
            Nothing could be found wrong to explain the missing service.
            It may be available now.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.NotLocallyRegistered">
            <summary>
            The requested service had no match in the local service registry.
            </summary>
            <remarks>
            All services, whether local or remote, must be in the local registry in order to be acquired locally.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ChaosConfigurationDeniedRequest">
            <summary>
            Special resiliency testing configuration is in place and denied access to this service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.LocalServiceHiddenOnExclusiveClient">
            <summary>
            The service is expected to come from an exclusive server (e.g. a Codespace Server)
            but the connection is not ready yet or the server does not offer it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceAudienceMismatch">
            <summary>
            The service is not exposed to the audience making the request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryNotProffered">
            <summary>
            The service is registered but no factory has been loaded for it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryReturnedNull">
            <summary>
            The service factory returned null instead of an instance of the service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryFault">
            <summary>
            The service factory threw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.LocalServiceHiddenOnRemoteClient">
            <summary>
            The service is expected to come from a remote server
            but the connection is not ready yet or the server does not offer it.
            A locally proffered service is not available when it also can come remotely and a remote connection exists or is expected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis">
            <summary>
            Contains the result of a missing service analysis as returned from <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.#ctor(Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode,System.Nullable{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis" /> class.
            </summary>
            <param name="errorCode">The error code explaining why the service could not be obtained.</param>
            <param name="expectedSource">The source that the service was expected to come from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.ErrorCode">
            <summary>
            Gets the error code explaining why the service could not be obtained.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.ExpectedSource">
            <summary>
            Gets the source that the service was expected to come from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerUtilities.DeferredFormatting(System.Func{System.String})">
            <summary>
            Creates an object whose <see cref="M:System.Object.ToString" /> method defers to a given delegate.
            </summary>
            <param name="formatter">
            The delegate that will construct the string.
            This may be called concurrently or repeatedly.
            After returning a non-null value it will not be called again as its value will be cached.
            </param>
            <returns>An object whose <see cref="M:System.Object.ToString" /> will invoke the <paramref name="formatter" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerUtilities.WriteToPipe(System.IO.Pipelines.PipeWriter,System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Copies a sequence of bytes to a <see cref="T:System.IO.Pipelines.PipeWriter" />.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="sequence">The sequence to read.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration">
            <summary>
            Brokered service registration information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.#ctor(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration" /> class.
            </summary>
            <param name="audience">The audience that may consume this brokered service.</param>
            <param name="profferingPackageId">The ID of the brokered service host that may need to be activated in order to proffer the service factory.</param>
            <param name="allowGuestClients">A value indicating whether remote guests should be allowed to access this service.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.Audience">
            <summary>
            Gets the intended audiences for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.AllowGuestClients">
            <summary>
            Gets a value indicating whether this service is exposed to non-Owner clients.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.ProfferingPackageId">
            <summary>
            Gets the ID of the package to load so that this service will actually be proffered.
            </summary>
            <remarks>
            If this is null, the <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.LoadProfferingPackageAsync(System.Threading.CancellationToken)" /> method can be assumed to be a no-op.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedLocally">
            <summary>
            Gets a value indicating whether this service is exposed to local clients relative to itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedRemotely">
            <summary>
            Gets a value indicating whether this service is exposed to remote clients relative to itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.DebuggerDisplay">
            <summary>
            Gets the string to use in a <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedTo(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Gets a value indicating whether this service is approved for consuming by a given audience.
            </summary>
            <param name="consumingAudience">The candidate audience that would like to get this service.</param>
            <returns>A value indicating whether the service permits access by the given audience.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.LoadProfferingPackageAsync(System.Threading.CancellationToken)">
            <summary>
            Triggers the call to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
            the service represented by this registration if the service has not yet been proffered.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that tracks the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource">
            <summary>
            Enumerates the possible sources of a brokered service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.SameProcess">
            <summary>
            The services are proffered from within this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.OtherProcessOnSameMachine">
            <summary>
            The services are proffered by local (and trusted) sources, outside this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedServer">
            <summary>
            The services are proffered by a remote server (e.g. Live Share host) that is under the control of the same user account as the local one (the guest who is joining the session).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.UntrustedServer">
            <summary>
            The services are proffered by a remote server (e.g. Live Share host) that is NOT under the control of the same user account as the local one (the guest who is joining the session).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedExclusiveServer">
            <summary>
            The services are proffered by a remote server that is under the control of the same user account as the local one
            using an exclusive connection (that isn't the traditional Live Share sharing session).
            For example a Codespace server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedExclusiveClient">
            <summary>
            The services are proffered by a remote <em>client</em> under the control of the same user account as the local one.
            This is a special 1:1 relationship.
            For example the client of a Codespace.
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero" /> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this" /> <see cref="T:Windows.Win32.Foundation.HRESULT" />, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
            <content>
            Contains macros.
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(System.Runtime.InteropServices.SafeHandle,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(Windows.Win32.Foundation.HANDLE,System.UInt32*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(Windows.Win32.Foundation.HANDLE,System.UInt32*)">
            <summary>Retrieves the client process identifier for the specified named pipe.</summary>
            <param name="Pipe">
            <para>A handle to an instance of a named pipe. This handle must be created by the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-createnamedpipea">CreateNamedPipe</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getnamedpipeclientprocessid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ClientProcessId">The process identifier.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getnamedpipeclientprocessid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.HRESULT_FROM_WIN32(Windows.Win32.Foundation.WIN32_ERROR)">
            <summary>
            Creates an <see cref="T:Windows.Win32.Foundation.HRESULT" /> that represents a given <see cref="T:Windows.Win32.Foundation.WIN32_ERROR" />.
            </summary>
            <param name="error">The win32 error to be wrapped.</param>
            <returns>An <see cref="T:Windows.Win32.Foundation.HRESULT" />.</returns>
            <remarks>
            Learn more in <see href="https://docs.microsoft.com/windows/win32/api/winerror/nf-winerror-hresult_from_win32">the documentation for this API</see>.
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>7fH/wW7s6+YOzVoLKx+WirxwSgA2jFQIN3utFjMhLSY=</DigestValue></Reference></SignedInfo><SignatureValue>JidSULhI8uJeFt+Qmtzg6QPBg3p39hso1VyZPMpDfU7x2cxQ7Dtu0lsEJa7uQnT4tAG0rwA/h9FNsZLYASPNYkClKO7hWzanV5fs5rX1wUHWEk/vFq+lADOG+sIOyvf818aZ/r2HCVfJiN9w4q7cgdBhCuLLbDFCik1fYkJj5Wo2U8PLvntYuAbhORuVyWI+LC7B2g08cNVIHv/905QY5p2JpPFnKo4+Atr6bigTJ9KiqKgCV/t3Qw229dbOUDmviRipr02xdx0jOHhQ+DqKGWSfUJ0ZVMgPUG7XFp7Nm8Tl/xc3pJPdeUNVqpd41MjNz+nkd/SvjI3l3WXbkYHVbg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
